core = require("Core")

i18n = require("i18n")
require("locales")

constants = require("Constants")

worm = require("Worm")

helper = require("HelperModule")

localeAssets = require("localeAssets")

local languages = {
    {locale='en', name = 'English'},
    {locale='fr', name = 'Français'}
}

local structure = {
    position_marker = constants.first_player_positions,

    manigance = '2b2575',

    conflictDeckLocation = core.getHardcodedPositionFromGUID('f9ea6b', -3.37652636, 0.725000858, -9.742931) + constants.someHeight,

    zone_intrigue = 'a377d8',
    zone_imperium = constants.imperiumDeckZone,
    epic_cards = constants.epic_cards,
    -- conflictZone1 = "616984",
    -- conflictZone2 = "7c9ceb",
    -- conflictZone3 = "f9ea6b",
    trashBin = '8d39ef',

    baseGameManualPosition = {-7.677, 0, -14.917},

    button_offset_y = 0, -- Set number. Value greater than or equal to 0. Defaults to 0.10.
    button_width = 2000, -- Set number. Defaults to 450.
    button_height = 300, -- Set number. Defaults to 300.
    button_color = {0.25, 0.25, 0.25}, -- Set number {Red,Green,Blue}. Value bitween 0.00 to 1.00. Defaults to {1.00,1.00,1.00] ("White").
    text_color = {1.00, 1.00, 1.00}, -- Set number {Red,Green,Blue}. Value bitween 0.00 to 1.00. Defaults to {0.25,0.25,0.25] ("Black").
    text_size = 200, -- Set number. Defaults to 100.

    tleilaxuCardCostByGUID = {}
}

local truc = {
    trash = {
        Green = "4060b5",
        Blue = "52a539",
        Yellow = "7d1e07",
        Red = "ea3fe1",
        Everyone = "ef8614"
    },

    hagal_rise_of_ix_2P = "1f3751",
    hagal_2P = "43a37f",
    hagal_rise_of_ix_1P = "cb48b7",
    hagal_1P = "2d887f",
    hagal_everytime_except_immortality_1P = "d1ff61",
    hagal_immortality_1P = "9f6ea8",
    hagal_rise_of_ix = "dd0da1",
    hagal_without_rise_of_ix = "72d430",

    hagal1P_base = "54a2cb",
    hagal1P = "6020d0",
    hagal2P_base = "1dd8a5",
    hagal2P = "8f8cc1",

    dune_cards_decks_zone = {
        Green = "e23476",
        Blue = "355dc0",
        Yellow = "d3521b",
        Red = "7b2ba8"
    },

    councellor_bonus_bag = "074f6d",

    -- "Four Players" VP
    FP1 = '66444c',
    FP2 = '4e8873',
    FP3 = 'a6c2e0',
    FP4 = '311255',

    tech_tiles_en = "cb766f",
    tech_tiles_fr = "6116af",

    bene_tleilax_zone = '042b49',
    research_station_immortality = '54413c',
    conflictOne = "616984",
    conflictTwo = "7c9ceb",
    conflictThree = "f9ea6b",
    epicgamebutton = "f8480b",

    hand_players = {
        Green = "482f72",
        Blue = "e50f77",
        Yellow = "050f39",
        Red = "8a9816"
    },
    atomics = {'d5ff47', '0a22ec', '700023', '7e10a9'},
    experimentation_decks = {'ef9531', '45ce21', '2d935f', '8ed0cd'},

    pion_reput = {
        Emperor = {
            Red = 'acfcef',
            Blue = '426a23',
            Green = 'd7c9ba',
            Yellow = '489871'
        },
        Guild = {
            Red = 'be464e',
            Blue = '4069d8',
            Green = '89da7d',
            Yellow = '9d0075'
        },
        Bene = {
            Red = '713eae',
            Blue = '2a88a6',
            Green = '2dc980',
            Yellow = 'a3729e'
        },
        Fremen = {
            Red = '088f51',
            Blue = '0e6e41',
            Green = 'd390dc',
            Yellow = '77d7c8'
        }
    },

    leaderRandomizer = "cf6ca1"
}

local setup = {
    done = false,

    tournament = false,
    score_board = false,

    epic_mode = false,
    rise_of_ix = true,
    immortality = true,
    blitz = false,
    black_market = false,

    leaderPositions = {},

    numPlayers = nil,
    hotseat_mode = false,

    tleilaxuCardCostByGUID = {}
}

_ = core.registerLoadablePart(function(saved_data)

    -- TODO Repair
    if true then
        return
    end

    self.interactable = false
    councellor_bonus_bag.interactable = false

    for _, player in pairs(constants.alivePlayers) do
        player.score_marker.interactable = false
    end

    local hidden_zone = getObjectFromGUID("e88cd0").getObjects()
    hideZoneContent(hidden_zone, "AutomataStuff")

    truc = core.resolveGUIDs(false, truc)

    -- Any reason to use integers instead of booleans? Ignorance I guess.
    if saved_data ~= "" then
        local state = JSON.decode(saved_data)
        setup = state.setup
    end

    if setup.done then
        restoreSetupGame()
    else
        -- initial positions of leaders on the table starting with top left Yuna, from left to right
        -- used to replace leaders on the table after moving them
        for i, leaderGuid in ipairs(leadersGUID) do
            leaderPositions[i] = getObjectFromGUID(leaderGuid).getPosition()
        end
        createAllButtons()
    end

    if not setup.done or numPlayers > 2 then
        local leader_hidden_zone = getObjectFromGUID("0e6313")
        hideZoneContent(leader_hidden_zone, "AutomataStuff")
    end
end)

function restoreSetupGame()
    local seated_players = getPlayersBasedOnHotseat()

    for _, color in pairs(seated_players) do
        for _, pions in pairs(pion_reput) do
            local pion = pions[color]
            if pion then
                pion.setLock(true)
                pion.interactable = false
            end
        end

        local player = constants.alivePlayers[color]
        if player then
            if immortality then
                player.tleilaxuTokens.interactable = false
                player.researchTokens.interactable = false
            end
            if rise_of_ix then
                player.cargo.interactable = false
            end
        end
    end

    if setup.tournament then
        worm.firstStep()
    end

    if setup.score_board then
        Wait.time(function() worm.setOpenScoreBoard() end, 3)
    end
end

function onLocaleChange()
    self.clearButtons()
    createAllButtons()
end

function updateSave()
    local state = {
        setup = setup
    }
    self.script_state = JSON.encode(state)
end

function updateValue()
    valueButtonParameters.label = tostring(numberOfBan)
    self.editButton(valueButtonParameters)
end

function fromIntRGB(r, g, b)
    return Color(r / 255, g / 255, b / 255)
end

function createToggleMenuButton(selected, label, click_function, index, colors)
    local parameters = {
        label = label,
        click_function = click_function,
        function_owner = self,
        position = {0, 0.5, 0.65 * index - 0.35},
        height = button_height,
        width = 1800,
        font_size = text_size,
        rotation = {0, 0, 0}
    }

    if selected then
        parameters.label = "[✓] " .. label
        parameters.color = colors.on.color
        parameters.font_color = colors.on.font_color
    else
        parameters.label = "[   ] " .. label
        parameters.color = colors.off.color
        parameters.font_color = colors.off.font_color
    end

    self.createButton(parameters)
end

function createAllButtons()
    activateSetup()
    activateSelectLanguageButtons()
    activateEpicMode(0)
    activateBlitz(1)
    activateRiseOfIx(2)
    activateImmortality(3)
    activateHiddenPicks(4)
    activateBlackMarket(5)
    activateTournament(6)
    activateScoreBoard(7)
end

function activateSelectLanguageButtons()
    for i, language in pairs(languages) do
        local prefix = "[   ] "
        if i18n.getLocale() == language.locale then
            prefix = "[✓] "
        end
        self.createButton({
            label = prefix .. language.name,
            click_function = "setLanguage" .. tostring(i),
            function_owner = self,
            position = {-12.75, 0.5, 5.5 + i},
            color = fromIntRGB(128, 77, 0),
            font_color = fromIntRGB(204, 153, 0),
            height = button_height * 1.2,
            width = button_width * 0.75,
            font_size = text_size * 1,
        })
    end
end

function setLanguage1()
    setLanguage(languages[1])
end

function setLanguage2()
    setLanguage(languages[2])
end

function setLanguage(language)
    --log("setLanguage: " .. language.name)
    i18n.setLocale(language.locale)
    localeAssets.load()
    core.callOnAllLoadedObjects("onLocaleChange")
end

function activateSetup()
    self.createButton({
        label = "SETUP",
        click_function = "Presetup",
        function_owner = self,
        position = {0, 0.5, -1.4},
        color = {1.00, 1.00, 1.00},
        font_color = {0.25, 0.25, 0.25},
        height = button_height * 2,
        width = button_width,
        font_size = text_size * 2.5,
        rotation = {0, 0, 0}
    })
end

function activateEpicMode(index)
    local colors = {
        on = { color = {0.651, 0, 0}, font_color = text_color },
        off = { color = button_color, font_color = text_color }
    }
    createToggleMenuButton(setup.epic_mode, "EPIC MODE", EpicMode, index, colors)
end

function activateBlitz(index)
    local colors = {
        on = { color = "Orange", font_color = "White" },
        off = { color = button_color, font_color = "White" }
    }
    createToggleMenuButton(setup.blitz, "BLITZ", Blitz, index, colors)
end

function activateRiseOfIx(index)
    local colors = {
        on = { color = "Green", font_color = text_color },
        off = { color = button_color, font_color = text_color }
    }
    createToggleMenuButton(setup.rise_of_ix, "RISE OF IX", RiseOfIx, index, colors)
end

function activateImmortality(index)
    local colors = {
        on = { color = "Purple", font_color = text_color },
        off = { color = button_color, font_color = text_color }
    }
    createToggleMenuButton(setup.immortality, "IMMORTALITY", RiseOfIx, index, colors)
end

function activateHiddenPicks(index)
    local colors = {
        on = { color = "Brown", font_color = "White" },
        off = { color = button_color, font_color = "White" }
    }
    createToggleMenuButton(setup.tournament, "HIDDEN PICKS", HiddenPicks, index, colors)
    -- tooltip = i18n("hiddenPicksTooltip")
    if setup.hiddenPicks then
        activateNumberOfBan()
    end
end

function activateNumberOfBan()
    valueButtonParameters = {
        index = #self.getButtons(), -- Indexes start at 0...
        click_function = 'doNothing',
        function_owner = self,
        label = '',
        position = {3, 0.5, 2.25},
        width = button_height,
        height = button_height,
        color = "Brown",
        font_color = text_color,
        font_size = text_size,
        tooltip = i18n("hiddenPicksNumberBanishedTooltip")
    }
    self.createButton(valueButtonParameters)
    valueButtonParameters.label = tostring(numberOfBan)
    self.editButton(valueButtonParameters)
    plusOneButtonParameters = {
        click_function = 'addOne',
        function_owner = self,
        label = "+",
        position = {3.7, 0.5, 2.25},
        width = button_height,
        height = button_height,
        color = "Brown",
        font_color = text_color,
        font_size = text_size
    }
    self.createButton(plusOneButtonParameters)
    minusOneButtonParameters = {
        click_function = 'minusOne',
        function_owner = self,
        label = "-",
        position = {2.3, 0.5, 2.25},
        width = button_height,
        height = button_height,
        color = "Brown",
        font_color = text_color,
        font_size = text_size
    }
    self.createButton(minusOneButtonParameters)
    activateButtons()
end

function activateBlackMarket(index)
    local colors = {
        on = { color = "Black", font_color = "Grey" },
        off = { color = "Black", font_color = "Yellow" }
    }
    createToggleMenuButton(setup.black_market, "BLACK MARKET", Blitz, index, colors)
end

function activateTournament(index)
    local colors = {
        on = { color = "Black", font_color = "Orange" },
        off = { color = "Black", font_color = "Grey" }
    }
    createToggleMenuButton(setup.tournament, "TOURNAMENT", Tournament, index, colors)
end

function Tournament()
    self.clearButtons()
    if setup.tournament then
        setup.tournament = false
    else
        setup.tournament = true
        setup.epic_mode = false
        setup.blitz = false
        setup.rise_of_ix = true
        setup.immortality = false
        setup.hiddenPicks = true
        setup.black_market = false
    end
    createAllButtons()
end

function activateScoreBoard(index)
    local colors = {
        on = { color = "Black", font_color = "Blue" },
        off = { color = "Black", font_color = "Grey" }
    }
    createToggleMenuButton(setup.tournament, "SCOREBOARD", ScoreBoard, index, colors)
end

function ScoreBoard()
    self.clearButtons()
    setup.score_board = not setup.score_board
    createAllButtons()
end

function EpicMode()
    self.clearButtons()
    if not setup.epic_mode then
        setup.epic_mode = true
        setup.rise_of_ix = true
        setup.blitz = false
    else
        setup.epic_mode = false
    end
    createAllButtons()
end

function RiseOfIx()
    self.clearButtons()
    if not setup.rise_of_ix then
        setup.rise_of_ix = true
        setup.minimum_value_ban = 1 -- adjust number of ban since there is less leaders in base game
        setup.maximum_value_ban = 10
        setup.numberOfBan = math.ceil(2 * numberOfBan)
    else
        setup.rise_of_ix = false
        setup.epic_mode = false
        setup.minimum_value_ban = 1
        setup.maximum_value_ban = 4
        setup.numberOfBan = math.floor(numberOfBan / 2.6) + 1 -- janky formula: conversion between # of ban base game vs rise of ix
    end
    createAllButtons()
end

function Immortality()
    self.clearButtons()
    setup.immortality = not setup.immortality
    createAllButtons()
end

function Blitz()
    self.clearButtons()
    setup.blitz = not setup.blitz
    createAllButtons()
end

function BlackMarket()
    self.clearButtons()
    setup.black_market = not setup.black_market
    createAllButtons()
end

function HiddenPicks()
    self.clearButtons()
    setup.hiddenPicks = not setup.hiddenPicks
    createAllButtons()
end

function Presetup(_, color)
    local players = getSeatedPlayers()
    for _, seatedColor in pairs(players) do
        if seatedColor ~= "Red" and seatedColor ~= "Green" and seatedColor ~= "Blue" and seatedColor ~= "Yellow" then
            broadcastToAll(i18n("notSeated"), "White")
            return
        end
    end

    local hotseats = {
        Blue = {
            obj = getObjectFromGUID("9eeccd"),
            pos = constants.players["Blue"].board.getPosition() + Vector(-13.5, 0.7, -1)
        },
        Red = {
            obj = getObjectFromGUID("895594"),
            pos = constants.players["Red"].board.getPosition() + Vector(-13.5, 0.7, -1)
        },
        Green = {
            obj = getObjectFromGUID("96aa58"),
            pos = constants.players["Green"].board.getPosition() + Vector(13.5, 0.7, -1)
        },
        Yellow = {
            obj = getObjectFromGUID("3d1b90"),
            pos = constants.players["Yellow"].board.getPosition() + Vector(13.5, 0.7, -1)
        }
    }

    if #players == 1 then
        Player[color].showOptionsDialog(i18n("soloHotseat"), {"Solo", "Hotseat"}, "Solo", function(text, _, _)
            if text == "Hotseat" then
                setup.hotseat_mode = true
                setup.numPlayers = 4

                for color, _ in ipairs(constants.players) do
                    local hotseat = hotseats[color]
                    hotseat.obj.setPosition(hotseat.pos)
                    hotseat.obj.setRotation({0, 0, 0})
                    hotseat.obj.setInvisibleTo({})
                end
            elseif text == "Solo" then
                setup.numPlayers = 1
            end
            updateSave()
            Setup()
        end)
    else
        setup.numPlayers = #players
        updateSave()
        Setup()
    end
end

function Setup()
    if setup.numPlayers < 3 and setup.blitz then
        broadcastToAll(i18n("notBlitz"), "White")
        return
    end

    Global.call("resetRound")
    self.clearButtons()

    setupBase()

    setupHagal()
    setupRiseOfIx()
    setupImmortality()
    setupEpic()
    setupBlitz()

    if setup.epic_mode then
        setupConflits(5, 5, 0)
    elseif setup.blitz then
        setupConflits(4, 3, 0)
    else
        setupConflits(4, 5, 1)
    end

    setupHiddenPick()
    setupScoreBoard()

    Wait.time(postSetup, 3)
end

function setUpBase()
    for color, _ in pairs(constants.players) do
        helper.landTroopsFromOrbit(color, 3)
    end

    -- Suspicious...
    if not setup.immortality and not setup.epic_mode then
        for i, zone in ipairs(truc.dune_cards_decks_zone) do
            for _, deckOrCard in ipairs(helper.getDeckOrCard(zone)) do
                deckOrCard.flip()
                deckOrCard.setPositionSmooth(truc.pos_starter_decks[i], false, false)
            end
        end
    end
end

function setUpHagal()
    local pos_hagal = {10.85, 3, 45.99}
    if setup.numPlayers < 3 then
        for _, obj in pairs(getObjectFromGUID("0e6313").getObjects()) do
            obj.setInvisibleTo({})
        end
    end
    if setup.numPlayers == 2 then
        truc.hagal_2P.setPosition(pos_hagal)
        truc.hagal_everytime_except_immortality_1P.setPosition(pos_hagal)
        if setup.rise_of_ix == 0 then
            truc.hagal_without_rise_of_ix.setPosition(pos_hagal)
        else
            truc.hagal_rise_of_ix.setPosition(pos_hagal)
            truc.hagal_rise_of_ix_2P.setPosition(pos_hagal)
        end
    elseif setup.numPlayers == 1 then
        truc.hagal_1P.setPosition(pos_hagal)
        if setup.immortality == 1 then
            truc.hagal_immortality_1P.setPosition(pos_hagal)
        else
            truc.hagal_everytime_except_immortality_1P.setPosition(pos_hagal)
        end
        if setup.rise_of_ix == 0 then
            truc.hagal_without_rise_of_ix.setPosition(pos_hagal)
        else
            truc.hagal_rise_of_ix.setPosition(pos_hagal)
            truc.hagal_rise_of_ix_1P.setPosition(pos_hagal)
        end
    end
end

function setUpRiseOfIx()
    if setup.rise_of_ix then
        getObjectFromGUID(constants.intrigue_ix).setPosition(positioning.intrigue_pos)
        getObjectFromGUID(constants.imperium_deck_ix).setPosition(positioning.imperium_pos)
        Wait.time(moveTechDecks, 1)
    else
        RemoveIxContent()
    end
end

function setUpImmortality()
    if setup.immortality then
        memorizeOrderedTleilaxuDeck()

        getObjectFromGUID(constants.intrigue_immortality).setPosition(positioning.intrigue_pos)
        getObjectFromGUID(constants.imperium_deck_immortality).setPosition(positioning.imperium_pos)

        local deck = getDeckOrCardFromGUID(constants.tleilaxuDeckZone)
        deck.shuffle()
        Wait.time(function()
            local params1 = {}
            params1.position = constants.tleilaxuRow[1].pos
            params1.rotation = {0.00, 180.00, 0.00}
            deck.takeObject(params1)
        end, 0.35)
        Wait.time(function()
            local params2 = {}
            params2.position = constants.tleilaxuRow[2].pos
            params2.rotation = {0.00, 180.00, 0.00}
            deck.takeObject(params2)
        end, 0.7)

        for _, zone in ipairs(positioning.dune_cards_decks_zone) do
            for _, obj in ipairs(zone.getObjects()) do
                if obj.type == "Deck" or obj.type == "Card" then
                    obj.destruct()
                end
            end
        end

        for i, ref in ipairs(positioning.experimentation_decks) do
            local otherDeck = getObjectFromGUID(ref)
            otherDeck.flip()
            otherDeck.setPositionSmooth(positioning.pos_starter_decks[i], false, false)
        end

        truc.research_station_immortality.setPosition({-0.07, 0.59, -1.89})
        truc.research_station_immortality.setLock(true)
        -- Need to keep immo station interactable else the GET button of the normal station under will mess with the GET button of the new station
        -- research_station_immortality.interactable = false
    else
        constants.imperium_deck_immortality.destruct()
        constants.intrigue_immortality.destruct()
        getDeckOrCardFromGUID(constants.tleilaxuDeckZone).destruct()
        constants.reclaimed_forces.destruct()

        for _, obj in ipairs(truc.bene_tleilax_zone.getObjects()) do
            if obj.hasTag("BT Board") then obj.destruct() end
        end
        for _, ref in ipairs(truc.atomics) do
            getObjectFromGUID(ref).destruct()
        end
        for _, ref in ipairs(truc.experimentation_decks) do
            getObjectFromGUID(ref).destruct()
        end
        truc.research_station_immortality.destruct()
        -- destroy acquire buttons of tleilaxu row
        getObjectFromGUID(constants.buy7_guid).destruct()
        getObjectFromGUID(constants.buy8_guid).destruct()
    end
end

function setUpBlitz()
    if setup.blitz then
        Wait.time(function()
            getDeckOrCardFromGUID(constants.zone_intrigue).shuffle()
            getDeckOrCardFromGUID(constants.zone_imperium).shuffle()

            for color, _ in pairs(constants.players) do
                helper.gainResource(color, "solari", 2)
            end

            local players = getPlayersBasedOnHotseat()
            for _, color in pairs(players) do
                helper.drawIntrigue(color)
                helper.drawCardsFromPlace(constants.zone_imperium, 7)
                helper.drawCardsFromPlace(trash[color], 11)
            end
        end, 2)
    end
end

function RemoveIxContent()
    -- supprimer et remplacer
    truc.conflictThree.takeObject({position = constants.lowerTrashPosition, index = 4})
    truc.conflictTwo.takeObject({position = constants.lowerTrashPosition, index = 10})
    truc.conflictOne.takeObject({position = constants.lowerTrashPosition, index = 4})
    truc.conflictOne.takeObject({position = constants.lowerTrashPosition, index = 4})

    local toBeDestroyed = {
        constants.intrigue_ix,
        constants.imperium_deck_ix,

        leaders.yuna.GUID,
        leaders.hundro.GUID,
        leaders.ilesa.GUID,
        leaders.armand.GUID,
        leaders.tessia.GUID,
        leaders.rhombur.GUID,

        -- snoopers
        "a58ce8",
        "857f74",
        "bed196",
        "b10897",

        "a8f306",
        "1a3c82",
        "a15087",
        "734250",
        "82789e",
        "60f208",
        "5469fb",
        "71a414",
        "3371d8",
        "4575f3",
        "7b3fa2",
        "73a68f",
        "366237",
        truc.tech_tiles_en,
        truc.tech_tiles_fr,
        "d75455",

        "e9096d",
        "68e424",
        "34281d",
        "8fa76f",

        "a139cd"
    }

    Wait.time(function()
        for _, GUID in ipairs(toBeDestroyed) do
            getObjectFromGUID(GUID).destruct()
        end
    end, 0.1)
end

-- Some uglyness here.
function setUpConflits(conflic1Count, conflic2Count, conflic3Count)
    truc.conflictThree.shuffle()
    truc.conflictTwo.shuffle()
    truc.conflictOne.shuffle()

    local level3_conflicts_zone = getDeckOrCardFromGUID("07e239")
    local nb_conflit_iii = level3_conflicts_zone.getQuantity()
    if conflic1Count < nb_conflit_iii then
        for _ = 1, conflic1Count do
            truc.conflictThree.takeObject({
                position = {truc.conflictDeckLocation[1], 2, truc.conflictDeckLocation[3]}
            })
        end
        destroyObject(truc.conflictThree.remainder)
    end

    if setup.blitz then
        Wait.time(function()
            trash["Everyone"].takeObject({
                position = {
                    truc.conflictDeckLocation[1], 2.3, truc.conflictDeckLocation[3]
                },
                rotation = {0, 180, 180},
                smooth = false,
                guid = manigance
            })
        end, 0.9)
    end

    Wait.time(function()
        truc.conflictTwo.shuffle()
        for _ = 1, conflic2Count do
            truc.conflictTwo.takeObject({
                position = {
                    truc.conflictDeckLocation[1], 2.6, truc.conflictDeckLocation[3]
                }
            })
        end
        destroyObject(truc.conflictTwo)
    end, 1)

    Wait.time(function()
        truc.conflictOne.shuffle()
        for _ = 1, conflic3Count do
            truc.conflictOne.takeObject({
                position = {
                    truc.conflictDeckLocation[1], 3.2, truc.conflictDeckLocation[3]
                }
            })
        end
        destroyObject(truc.conflictOne)
    end, 2)
end

function setUpHiddenPick()
    if setup.hiddenPicks then
        if setup.numPlayers > 2 then -- setPlayerHiddenLeaderPickOrder have not been generalized enough to allow 2 player bans
            if not setup.rise_of_ix then
                local leaderGUIDs = {
                    leaders.memnon.GUID,
                    leaders.ariana.GUID,
                    leaders.paul.GUID,
                    leaders.leto.GUID,
                    leaders.rabban.GUID,
                    leaders.vladimir.GUID,
                    leaders.ilban.GUID,
                    leaders.helena.GUID
                }

                setup.leaderPositions = {}

                for i, leaderGUID in ipairs(leaderGUIDs) do
                    setup.leaderPositions[i] = getObjectFromGUID(leaderGUID).getPosition()
                end
            end

            -- move leader to randomizer for dramatic effect
            Wait.time(moveAllLeadersToRandomizer, 1)
            -- show, pause, then remove from game random leaders
            Wait.time(banRandomLeaders, 4)
            -- remaining leader are replaced at the table in random order
            Wait.condition(replaceLeaders, function()
                return hiddenPicksOrderSet and leadersBanned
            end)
        else
            broadcastToAll(i18n("notHiddenPicks"), "White")
            setup.hiddenPicks = false
        end
    else
        if tournament then
            worm.firstStep()
        end
    end
end

function setUpScoreBoard()
    if setup.score_board then
        Wait.time(function() worm.setOpenScoreBoard() end, 3)
    end
end

function postSetup()
    destructMissingPlayers()
    assert(zone_intrigue)
    getDeckOrCardFromGUID(zone_intrigue).shuffle()
    getDeckOrCardFromGUID(zone_imperium).shuffle()
    getDeckOrCardFromGUID('6d8a2e').shuffle()
    getDeckOrCardFromGUID('e6cfee').shuffle()
    getDeckOrCardFromGUID('907f66').shuffle()
    getDeckOrCardFromGUID('4f08fc').shuffle()
    Wait.time(ImperiumDeal, 0.5)
    Wait.time(function()
        local firstConflictAnchor = getObjectFromGUID("cb0478")
        firstConflictAnchor.call("ConflictButton")
    end, 3)
    Wait.time(startPickPlayer, 2)
    Wait.time(function()
        setup.done = true
        updateSave()
    end, 5)
end

function setUpEpic()
    if setup.epic_mode then
        if immortality == 0 then
            for i, zone in ipairs(dune_cards_decks_zone) do
                for _, obj in ipairs(zone.getObjects()) do
                    if obj.type == "Deck" then
                        obj.takeObject({
                            position = pos_starter_decks[i],
                            smooth = false,
                            flip = true
                        })
                    end
                end
            end

            -- Delete the only Dune card left wich is not a container anymore so could not delete it above

            Wait.time(function()
                for i, zone in ipairs(dune_cards_decks_zone) do
                    for _, obj in ipairs(zone.getObjects()) do
                        if obj.type == "Card" then obj.destruct() end
                    end
                end
            end, 0.5)

            for i, ref in ipairs(epic_cards) do
                local card = getObjectFromGUID(ref)
                card.flip()
                card.setPosition(pos_starter_decks[i])
            end
        else
            local i = 1
            for _, player in pairs(constants.players) do
                local card = getObjectFromGUID(epic_cards[i])
                card.setPosition(player.discardPosition)
                card.setInvisibleTo({})
                i = i + 1
            end
        end

        Wait.time(moveTroops, 2)
        Wait.time(function()
            getDeckOrCardFromGUID(zone_intrigue).shuffle()
            getDeckOrCardFromGUID(zone_intrigue).deal(1)
        end, 5)
    else
        for _, object in ipairs(structure.epic_cards) do
            getObjectFromGUID(object).destruct()
        end
    end
end

function memorizeOrderedTleilaxuDeck()
    local tleilaxuCardCostByName = {
        beguiling_pheromones = 3,
        dogchair = 2,
        contaminator = 1,
        corrino_genes = 1,
        face_dancer = 2,
        face_dancer_initiate = 1,
        from_the_tanks = 2,
        ghola = 3,
        guild_impersonator = 2,
        industrial_espionage = 1,
        scientific_breakthrough = 3,
        slig_farmer = 2,
        stitched_horror = 3,
        subject_x_137 = 2,
        tleilaxu_infiltrator = 2,
        twisted_mentat = 4,
        unnatural_reflexes = 3,
        usurper = 4,
        piter_genius_advisor = 3
    }

    local currentLocale = i18n.getLocale()
    local resources = localeAssets[currentLocale]

    local deck = getObjectFromGUID(constants.tleilaxu_deck)
    for i, card in ipairs(deck.getObjects()) do
        local name = resources.tleilaxuOrderedCards[i]
        local cost = tleilaxuCardCostByName[name]
        setup.tleilaxuCardCostByGUID[card.guid] = cost
    end
end

function getTleilaxuCardPrice(card)
    local guid = card.getGUID()
    local cost = tleilaxuCardCostByGUID[guid]
    if not cost then
        cost = 0
        log("No memorized Tleilaxu card for GUID " .. guid)
    end
    return cost
end

function moveTroops()
    for color, _ in pairs(constants.players) do
        helper.landTroopsFromOrbit(color, 2)
    end
end

function moveTechDecks()
    local techs = nil
    if i18n.getLocale() == 'en' then
        techs = tech_tiles_en
    elseif i18n.getLocale() == 'fr' then
        techs = tech_tiles_fr
    end
    techs.randomize()

    local centerPos = constants.getLandingPositionFromGUID(constants.ixPlanetBoard)
    local techSlotPos = {
        centerPos + Vector(1.69, 3.02, 2.35),
        centerPos + Vector(1.69, 3.02, 0.30),
        centerPos + Vector(1.69, 3.02, -1.75)
    }

    local t = 0
    for i = 1, 5, 1 do
        Wait.time(function()
          for j = 1, 3 do
              techs.takeObject({
                  position = techSlotPos[j],
                  rotation = {0, 180, 180}
              })
          end
        end, t)
        t = t + 0.25
    end
    Wait.time(function()
        for j = 1, 3 do
            techs.takeObject({
                position = techSlotPos[j],
                rotation = {0, 180, 0}
            })
        end
        destroyObject(tech_tiles_en)
        destroyObject(tech_tiles_fr)
    end, t)

    Wait.time(function()
        local ixPlanetBoard = getObjectFromGUID("d75455")
        ixPlanetBoard.call("createTechZones")
    end, 1)
end

function ImperiumDeal()
    local deck_imperium = getDeckOrCardFromGUID(zone_imperium)
    deck_imperium.shuffle()

    for i = 1, 5 do
        Wait.time(function()
            local slot = constants.imperiumRowSlots[i]
            helper.moveCardFromZoneGUID(constants.imperiumDeckZone, slot.pos, Vector(0, 180, 0), true)
        end, i * 0.35)
    end

    -- TODO Explicit dependencies?
    local blackMarketBoard = getObjectFromGUID("ab7ac5")
    if setup.black_market then
        blackMarketBoard.call("initBlackMarket")
    else
        blackMarketBoard.destruct()
    end
end

function updateScores()
    if score_board then
        worm.updateScores()
    end
end

function destructMissingPlayers()
    local seated_players = getPlayersBasedOnHotseat()

    for _, color in pairs(seated_players) do
        for _, faction in pairs(pion_reput) do
            faction[color].setLock(true)
            faction[color].interactable = false
        end

        if immortality == 1 then
            constants.players[color].tleilaxuTokens.interactable = false
            constants.players[color].researchTokens.interactable = false
        end
        if rise_of_ix == 1 then constants.players[color].cargo.interactable = false end
    end

    if numPlayers < 4 then
        -- Destroy one by one to give time to the physic engine to stack the tokens nicely.
        chainDestruct({FP1, FP2, FP3, FP4})
    end

    for color, _ in pairs(hand_players) do
        if not hasValue(seated_players, color) then
            hand_players[color].destruct()
        end
    end

    for color, player in pairs(constants.players) do
        if not hasValue(seated_players, color) then
            player.board.call("shutdown", {rise_of_ix, immortality})
            for _, pions in pairs(pion_reput) do
                pions[color].destruct()
            end
        end
    end
end

function chainDestruct(objects)
    assert(objects)
    local destroyLater = function()
        local object = objects[1]
        assert(object)
        object.destruct()
        table.remove(objects, 1)
        chainDestruct(objects)
    end
    if #objects > 0 then
        Wait.time(destroyLater, 0.5)
    end
end

function hasValue(tab, val)
    for _, value in ipairs(tab) do
        if value == val then
            return true
        end
    end
    return false
end

function hideZoneContent(zone, optionalTag)
    for _, object in pairs(zone.getObjects()) do
        if not optionalTag or object.hasTag(optionalTag) then
            object.setInvisibleTo({
                "Red", "Blue", "Green", "Yellow", "White", "Grey", "Brown", "Pink", "Purple", "Orange"
            })
        end
    end
end
