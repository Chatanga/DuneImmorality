i18n = require("i18n")
require("locales")

constants = require("Constants")

boardCommonModule = require("BoardCommonModule")

battlegroundModule = require("BattlegroundModule")

parkModule = require("ParkModule")

baseStructure = {
    spaces = {
        Stillsuits = '556f43',
        HardyWarriors = 'a2fd8e',
        Secrets = '1f7c08',
        SelectiveBreeding = '7dc6e5',
        Foldspace = '9a9eb5',
        Heighliner = '8b0515',
        Wealth = 'b2c461',
        Conspire = 'cd9386',
        SietchTabr = '5bc970',
        ResearchStation = 'af11aa',
        Carthag = 'b1c938',
        Arrakeen = '17b646',
        TheGreatFlat = '69f925',
        HaggaBasin = '622708',
        ImperialBasin = '2c77c1'
    },
    mentatZone = '565d09',
    flagZones = {
        ImperialBasin = '3fe117',
        Arrakeen = 'f1f53d',
        Carthag = '9fc2e1'
    },
    spiceBonuses = {
        ImperialBasin = '3cdb2d',
        HaggaBasin = '394db2',
        TheGreatFlat = '116807'
    }
}

_ = require("Core").registerLoadablePart(function()
    self.interactable = false

    baseStructure = core.resolveGUIDs(false, baseStructure)

    garrisonParks = {
        createGarrisonPark("Green", Vector(8.15, 0.85, -7.65)),
        createGarrisonPark("Yellow", Vector(8.15, 0.85, -10.35)),
        createGarrisonPark("Blue", Vector(1.55, 0.85, -10.35)),
        createGarrisonPark("Red", Vector(1.55, 0.85, -7.65))
    }

    activateButtons()
end)

function onLocaleChange()
    self.clearButtons()
    activateButtons()
end

function createGarrisonPark(playerColor, origin)
    local slots = {}
    for j = 3, 1, -1 do
        for i = 1, 4 do
            local x = (i - 2.5) * 0.45
            local z = (j - 2) * 0.45
            local slot = Vector(x, 0, z) + origin
            slots[#slots + 1] = slot
        end
    end

    local zone = parkModule.findBoundingZone(0, Vector(0.35, 0.35, 0.35), slots)

    local garrison = parkModule.createPark(
        "garrison." .. playerColor,
        slots,
        Vector(0, 0, 0),
        zone,
        playerColor,
        playerColor,
        false)

    local textColors =  helper.getPlayerTextColors(playerColor)

    helper.createAbsoluteButton(self, {
        click_function = "landOne" .. playerColor .. "TroopFromOrbit",
        function_owner = self,
        label = i18n("addTroopSmallButton"),
        position = origin + Vector(0, 0.01, -1),
        width = 650,
        height = 180,
        font_size = 150,
        color = textColors.bg,
        font_color = textColors.fg
    })

    return garrison
end

function landTroopsFromOrbit(parameters)
    local playerColor = parameters[1]
    local count = parameters[2]
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    local garrison = garrisonParks[playerColor]
    parkModule.transfert(count, orbit, garrison)
end

function sendTroopsBackToOrbit(parameters)
    local playerColor = parameters[1]
    local troops = parameters[2]
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    parkModule.putObjects(troops, orbit)
end

function getTroopsFromOrbit(playerColor)
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    return parkModule.getObjects(orbit)
end

function activateButtons()
    boardCommonModule.createActivationButton("Stillsuits", "get", {-1, 0.05, 1.75})
    boardCommonModule.createActivationButton("HardyWarriors", "pay & get", {-1, 0.05, 1.37})
    boardCommonModule.createActivationButton("Secrets", "get", {-1, 0.05, 0.875})
    boardCommonModule.createActivationButton("SelectiveBreeding", "pay", {-1, 0.05, 0.5})
    boardCommonModule.createActivationButton("Foldspace", "get", {-1, 0.05, -0.08})
    boardCommonModule.createActivationButton("Heighliner", "pay & get", {0.1, 0.1, 0.1})
    boardCommonModule.createActivationButton("Wealth", "get", {-1, 0.05, -1.01})
    boardCommonModule.createActivationButton("Conspire", "pay & get", {-1, 0.05, -1.34})

    boardCommonModule.createActivationButton("SietchTabr", "get", {-0.2, 0.05, 0.16})
    boardCommonModule.createActivationButton("ResearchStation", "pay & get", {0.15, 0.05, -0.24})
    boardCommonModule.createActivationButton("Carthag", "get", {0.75, 0.05, -0.55})
    boardCommonModule.createActivationButton("Arrakeen", "get", {1.4, 0.05, -0.67})

    boardCommonModule.createActivationButton("ImperialBasin", "Collect", {1.38, 0.05, -0.1})
    boardCommonModule.createActivationButton("HaggaBasin", "pay & Collect", {0.65, 0.05, 0.105})
    boardCommonModule.createActivationButton("TheGreatFlat", "pay & Collect", {-0.32, 0.05, 0.54})

    boardCommonModule.createUpDownButton("Emperor", {-1.82, 0.05, -1.30})
    boardCommonModule.createUpDownButton("Guild", {-1.82, 0.05, -0.53})
    boardCommonModule.createUpDownButton("Bene", {-1.82, 0.05, 0.47})
    boardCommonModule.createUpDownButton("Fremen", {-1.82, 0.05, 1.53})
end

function ImperialBasin(color)
    if boardCommonModule.anySpiceSpace(color, "imperialBasin", structure.space.ImperialBasin, 0, 1, structure.spiceBonuses.ImperialBasin) then
        Wait.time(function() applyControlOfImperialBasin() end, 0.5)
    end
end

function HaggaBasin(color)
    anySpiceSpace(color, "haggaBasin", structure.space.HaggaBasin, 1, 2, structure.spiceBonuses.HaggaBasin)
end

function TheGreatFlat(color)
    anySpiceSpace(color, "greatFlat", structure.space.TheGreatFlat, 2, 3, structure.spiceBonuses.TheGreatFlat)
end

function anySpiceSpace(color, spaceName, spaceZone, waterCost, spiceBaseAmount, spiceBonus)
    if boardCommonModule.checkAgentAndPlayer(color, spaceZone) then
        local leaderName = helper.getLeaderName(color)
        local water = constants.players[color].water
        if water.call("collectVal") < waterCost then
            broadcastToColor(i18n("noWater"), color, color)
        else
            for _ = 1, waterCost do
                water.call("decrementVal")
            end
            if leaderName == "Countess Ariana" then
                local nbSpice = harvestSpice(color, spiceBaseAmount - 1, spiceBonus)
                if boardCommonModule.drawCardsFromPlace(color, spaceName, 1) then
                    broadcastToAll(i18n(spaceName):format(leaderName, nbSpice) .. i18n("et") .. i18n("drawOneCard"), color)
                else
                    broadcastToAll(i18n(spaceName):format(leaderName, nbSpice) .. ".", color)
                end
            else
                local spiceAmount = harvestSpice(color, spiceBaseAmount, spiceBonus)
                broadcastToAll(i18n(spaceName):format(leaderName, spiceAmount) .. ".", color)
            end
            return true
        end
    end
    return false
end

function harvestSpice(color, base, spiceBonus)
    local spiceAmount = base + spiceBonus.call("collectVal")
    spiceBonus.call("resetVal")
    boardCommonModule.gainResource(color, "spice", spiceAmount)
    return spiceAmount
end

function Stillsuits(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Stillsuits) then
        local leaderName = helper.getLeaderName(color)
        constants.players[color].water.call("incrementVal")
        broadcastToAll(i18n("stillSuits"):format(leaderName), color)

        if leaderName == "Shaddam IV" then
            reputation.FremenDown(color)
        else
            reputation.FremenUp(color)
        end
    end
end

function HardyWarriors(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.HardyWarriors) then
        if boardCommonModule.payResource(color, "water", 1) then
            helper.landTroopsFromOrbit(color, 2)
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(i18n("hardyWarriors"):format(leaderName), color)

            if leaderName == "Shaddam IV" then
                reputation.FremenDown(color)
            else
                reputation.FremenUp(color)
            end
        end
    end
end

function Secrets(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Secrets) then
        Wait.time(function() helper.drawIntrigue(color) end, 0.2)
        local leaderName = helper.getLeaderName(color)
        broadcastToAll(i18n("secrets"):format(leaderName), color)

        if leaderName == "Shaddam IV" then
            reputation.BeneDown(color)
        else
            reputation.BeneUp(color)
        end
    end
end

function SelectiveBreeding(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.SelectiveBreeding) then
        if boardCommonModule.payResource(color, "spice", 2) then
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(i18n("selectiveBreeding"):format(leaderName), color)

            if leaderName == "Shaddam IV" then
                reputation.BeneDown(color)
            else
                reputation.BeneUp(color)
            end
        end
    end
end

function Foldspace(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Foldspace) then
        helper.moveCardFromZone(structure.foldspaceDeckZone, constants.players[color].discardPosition, Vector(0, 180, 0), false)
        local leaderName = helper.getLeaderName(color)
        broadcastToAll(i18n("foldspace"):format(leaderName), color)

        if leaderName == "Shaddam IV" then
            reputation.GuildDown(color)
        else
            reputation.GuildUp(color)
        end
    end
end

function Heighliner(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Heighliner) then
        if boardCommonModule.payResource(color, "spice", 6) then
            boardCommonModule.gainResource(color, "water", 2)
            helper.landTroopsFromOrbit(color, 5)
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(i18n("heighliner"):format(leaderName), color)

            if leaderName == "Shaddam IV" then
                reputation.GuildDown(color)
            else
                reputation.GuildUp(color)
            end
        end
    end
end

function Wealth(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Wealth) then
        local solariAmount = 2
        local leaderName = helper.getLeaderName(color)
        if leaderName == "Princesss Yuna" then
            solariAmount = 3
        end
        boardCommonModule.gainResource(color, "solari", solariAmount)
        broadcastToAll(i18n("wealth"):format(leaderName, solariAmount), color)

        if leaderName == "Shaddam IV" then
            reputation.EmperorDown(color)
        else
            reputation.EmperorUp(color)
        end
    end
end

function Conspire(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Conspire) then
        if boardCommonModule.payResource(color, "spice", 4) then
            local leaderName = helper.getLeaderName(color)
            local solariAmount = 5
            if leaderName == "Princesss Yuna" then
                solariAmount = 6
            end
            boardCommonModule.gainResource(color, "solari", solariAmount)
            helper.landTroopsFromOrbit(color, 2)
            Wait.time(function()
                helper.drawIntrigue(color)
            end, 0.2)
            broadcastToAll(i18n("conspire"):format(leaderName, solariAmount), color)

            if leaderName == "Shaddam IV" then
                reputation.EmperorDown(color)
            else
                reputation.EmperorUp(color)
            end
        end
    end
end

function SietchTabr(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.SietchTabr) then
        if (boardCommonModule.checkReputation(color, "fremen")) then
            boardCommonModule.gainResource(color, "water", 1)
            helper.landTroopsFromOrbit(color, 1)

            local leaderName = helper.getLeaderName(color)
            broadcastToAll(i18n("sietchTabr"):format(leaderName), color)
        end
    end
end

function ResearchStation(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.ResearchStation) then
        if boardCommonModule.payResource(color, "water", 2) then
            local leaderName = helper.getLeaderName(color)
            local drawCount = 3
            if boardCommonModule.drawCardsFromPlace(color, "researchStation", drawCount) then
                broadcastToAll(i18n("researchStationDraw"):format(leaderName, drawCount), color)
            else
                broadcastToAll(i18n("researchStationPayOnly"):format(leaderName), color)
            end
        end
    end
end

function Carthag(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.space.Carthag) then
        Wait.time(function() helper.drawIntrigue(color) end, 0.2)
        helper.landTroopsFromOrbit(color, 1)
        local leaderName = helper.getLeaderName(color)
        broadcastToAll(i18n("carthag"):format(leaderName), color)
        Wait.time(function() boardCommonModule.applyControlOfCarthag(color) end, 0.5)
    end
end

function Arrakeen(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.space.Arrakeen) then
        local leaderName = helper.getLeaderName(color)
        local drawCount = 1
        if boardCommonModule.drawCardsFromPlace(color, "arrakeen", drawCount) then
            broadcastToAll(i18n("arrakeenDraw"):format(leaderName, drawCount), color)
        else
            broadcastToAll(i18n("arrakeenTroopOnly"):format(leaderName), color)
        end
        helper.landTroopsFromOrbit(color, 1)
        Wait.time(function() boardCommonModule.applyControlOfArrakeen(color) end, 0.5)
    end
end

function applyControlOfImperialBasin()
    boardCommonModule.applyControlOfAnySpace(structure.spaces.ImperialBasin, "imperialBasin", "spice")
end

function applyControlOfArrakeen()
    boardCommonModule.applyControlOfAnySpace(structure.spaces.Arrakeen, "arrakeen", "solari")
end

function applyControlOfCarthag()
    boardCommonModule.applyControlOfAnySpace(structure.spaces.Arrakeen, "arrakeen", "solari")
end

function applyControlOfAnySpace(spaceZone, spaceName, resourceName)
    local controllingPlayer = getControllingPlayer(spaceZone, spaceName)
    if controllingPlayer then
        boardCommonModule.gainResource(constants.players[controllingPlayer], resourceName, 1)
        broadcastToAll(helper.getLeaderName(controllingPlayer) .. i18n(spaceName), {0.956, 0.392, 0.113})
    end
end

function getControllingPlayer(spaceZone, spaceName)
    local controllingPlayer = nil

    -- Check player dreadnoughts first since they supersede flags.
    for _, object in ipairs(spaceZone.getObjects()) do
        for color, _ in constants.players do
            if object.getName() == color .. " Dreadnought" or object.getName() == color .. " dreadnought" then
                assert(not controllingPlayer, "Too many dreadnoughts around " .. tostring(spaceName))
                controllingPlayer = color
            end
        end
    end

    -- Check player flags otherwise.
    if not controllingPlayer then
        for _, object in ipairs(spaceZone.getObjects()) do
            for color, _ in constants.players do
                if object.getName() == color .. " Flag" then
                    assert(not controllingPlayer, "Too many flags around " .. tostring(spaceName))
                    controllingPlayer = color
                end
            end
        end
    end

    return controllingPlayer
end

function FremenUp(_, color)
    forwardToReputation("FremenUp", color)
end

function FremenDown(_, color)
    forwardToReputation("FremenDown", color)
end

function BeneUp(_, color)
    forwardToReputation("BeneUp", color)
end

function BeneDown(_, color)
    forwardToReputation("BeneDown", color)
end

function GuildUp(_, color)
    forwardToReputation("GuildUp", color)
end

function GuildDown(_, color)
    forwardToReputation("GuildDown", color)
end

function EmperorUp(_, color)
    forwardToReputation("EmperorUp", color)
end

function EmperorDown(_, color)
    forwardToReputation("EmperorDown", color)
end

function forwardToReputation(action, color)
    self.clearButtons()
    Wait.time(activateButtons, 1)
    reputation[action](color)
end
