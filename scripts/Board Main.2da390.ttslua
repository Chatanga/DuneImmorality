i18n = require("i18n")
require("locales")

constants = require("Constants")

boardCommonModule = require("BoardCommonModule")

parkModule = require("ParkModule")

_ = require("Core").registerLoadablePart(function()
    self.interactable = false
    activateButtons()

    garrisonParks = {
        createGarrisonPark("Green", Vector(8.15, 0.85, -7.65)),
        createGarrisonPark("Yellow", Vector(8.15, 0.85, -10.35)),
        createGarrisonPark("Blue", Vector(1.55, 0.85, -10.35)),
        createGarrisonPark("Red", Vector(1.55, 0.85, -7.65))
    }
end)

function onLocaleChange()
    self.clearButtons()
    activateButtons()
end

function createPayButton(spaceName, label, position)
    local width
    if label == "get" then
        width = 400
    elseif label == "pay" then
        width = 400
    elseif label == "pay & get" then
        width = 900
    elseif label == "Collect" then
        width = 700
    elseif label == "pay & Collect" then
        width = 1200
    else
        assert(false, "unknow label: " .. tostring(label))
    end

    self.createButton({
        click_function = spaceName,
        function_owner = self,
        label = label,
        position = position,
        scale = {0.1, 0.1, 0.1},
        width = width,
        height = 350,
        font_size = 200,
        color = {0.25, 0.25, 0.25, 1},
        font_color = {0.7843, 0.7843, 0.7843, 1}
    })
end

function createUpDownButton(factionPrefix, label, position)
    local parameters = {
        function_owner = self,
        scale = {0.15, 0.100000001490116, 0.100000001490116},
        width = 300,
        height = 450,
        font_size = 350,
        color = {0.25, 0.25, 0.25, 1},
        font_color = {0.7843, 0.7843, 0.7843, 1},
        tooltip = i18n("toolTipDecreaseRep")
    }

    parameters.click_function = factionPrefix .. "Down"
    parameters.label = "↓"
    parameters.tooltip = i18n("toolTipDecreaseRep")
    parameters.position = helper.toVector(position) + 0.05
    self.createButton(parameters)

    parameters.click_function = factionPrefix .. "Up"
    parameters.label = "↑"
    parameters.tooltip = i18n("toolTipIncreaseRep")
    parameters.position = helper.toVector(position) - 0.05
    self.createButton(parameters)
end

function activateButtons()
    createActivationButton("Stillsuits", "get", {-1, 0.05, 1.75})
    createActivationButton("HardyWarriors", "pay & get", {-1, 0.05, 1.37})
    createActivationButton("Secrets", "get", {-1, 0.05, 0.875})
    createActivationButton("SelectiveBreeding", "pay", {-1, 0.05, 0.5})
    createActivationButton("Foldspace", "get", {-1, 0.05, -0.08})
    createActivationButton("Heighliner", "pay & get", {0.1, 0.1, 0.1})
    createActivationButton("Wealth", "get", {-1, 0.05, -1.01})
    createActivationButton("Conspire", "pay & get", {-1, 0.05, -1.34})

    createActivationButton("SietchTabr", "get", {-0.2, 0.05, 0.16})
    createActivationButton("ResearchStation", "pay & get", {0.15, 0.05, -0.24})
    createActivationButton("Carthag", "get", {0.75, 0.05, -0.55})
    createActivationButton("Arrakeen", "get", {1.4, 0.05, -0.67})

    createActivationButton("ImperialBasin", "Collect", {1.38, 0.05, -0.1})
    createActivationButton("HaggaBasin", "pay & Collect", {0.65, 0.05, 0.105})
    createActivationButton("TheGreatFlat", "pay & Collect", {-0.32, 0.05, 0.54})

    createUpDownButton("Emperor", {-1.82, 0.05, -1.30})
    createUpDownButton("Guild", {-1.82, 0.05, -0.53})
    createUpDownButton("Bene", {-1.82, 0.05, 0.47})
    createUpDownButton("Fremen", {-1.82, 0.05, 1.53})
end

function createGarrisonPark(playerColor, origin)
    local slots = {}
    for j = 3, 1, -1 do
        for i = 1, 4 do
            local x = (i - 2.5) * 0.45
            local z = (j - 2) * 0.45
            local slot = Vector(x, 0, z) + origin
            slots[#slots + 1] = slot
        end
    end

    local zone = parkModule.findBoundingZone(0, Vector(0.35, 0.35, 0.35), slots)

    local garrison = parkModule.createPark(
        "garrison." .. playerColor,
        slots,
        Vector(0, 0, 0),
        zone,
        playerColor,
        playerColor,
        false)

    local textColors =  helper.getPlayerTextColors(playerColor)

    helper.createAbsoluteButton(self, {
        click_function = "landOne" .. playerColor .. "TroopFromOrbit",
        function_owner = self,
        label = i18n("addTroopSmallButton"),
        position = origin + Vector(0, 0.01, -1),
        width = 650,
        height = 180,
        font_size = 150,
        color = textColors.bg,
        font_color = textColors.fg
    })

    return garrison
end

function ImperialBasin(_, color)
    forwardCall("ImperialBasin", color)
end

function HaggaBasin(_, color)
    forwardCall("HaggaBasin", color)
end

function TheGreatFlat(_, color)
    forwardCall("TheGreatFlat", color)
end

function Stillsuits(_, color)
    forwardCall("Stillsuits", color)
end

function HardyWarriors(_, color)
    forwardCall("HardyWarriors", color)
end

function Secrets(_, color)
    forwardCall("Secrets", color)
end

function SelectiveBreeding(_, color)
    forwardCall("SelectiveBreeding", color)
end

function Foldspace(_, color)
    forwardCall("Foldspace", color)
end

function Heighliner(_, color)
    forwardCall("Heighliner", color)
end

function Wealth(_, color)
    forwardCall("Wealth", color)
end

function Conspire(_, color)
    forwardCall("Conspire", color)
end

function SietchTabr(_, color)
    forwardCall("SietchTabr", color)
end

function ResearchStation(_, color)
    forwardCall("ResearchStation", color)
end

function Carthag(_, color)
    forwardCall("Carthag", color)
end

function Arrakeen(_, color)
    forwardCall("Arrakeen", color)
end

function forwardCall(spaceName, color)
    self.clearButtons()
    Wait.time(activateButtons, 1)
    boardCommonModule[spaceName](color)
end

function FremenUp(_, color)
    forwardToReputation("FremenUp", color)
end

function FremenDown(_, color)
    forwardToReputation("FremenDown", color)
end

function BeneUp(_, color)
    forwardToReputation("BeneUp", color)
end

function BeneDown(_, color)
    forwardToReputation("BeneDown", color)
end

function GuildUp(_, color)
    forwardToReputation("GuildUp", color)
end

function GuildDown(_, color)
    forwardToReputation("GuildDown", color)
end

function EmperorUp(_, color)
    forwardToReputation("EmperorUp", color)
end

function EmperorDown(_, color)
    forwardToReputation("EmperorDown", color)
end

function forwardToReputation(action, color)
    self.clearButtons()
    Wait.time(activateButtons, 1)
    reputation[action](color)
end

function onObjectEnterScriptingZone(zone, enter_object)
    local allianceBonuses = {
        emperor = applyBonusEmperor,
        guildSpatial = applyBonusSpatial,
        beneGesserit = applyBonusBene,
        fremen = applyBonusFremen
    }
    for faction, factionReputationTokens in pairs(reputationTokens) do
        for color, tokenGUID in pairs(factionReputationTokens) do
            if zone.guid == allianceZones[faction] and enter_object.getGUID() == tokenGUID then
                allianceBonuses[faction](_, color)
            end
        end
    end
end

function applyBonusFremen(_, color)
    constants.players[color].water.call("incrementVal")
    local leaderName = helper.getLeaderName(color)
    broadcastToAll(i18n("fremenBonus"):format(leaderName), color)
end

function applyBonusBene(_, color)
    Wait.time(function() boardCommonModule.drawIntrigue(color) end, 0.75)
    local leaderName = helper.getLeaderName(color)
    broadcastToAll(i18n("beneBonus"):format(leaderName), color)
end

function applyBonusSpatial(_, color)
    local solariAmount = 3

    local leaderName = helper.getLeaderName(color)
    local playersInCombat = Global.call("getFight")
    if leaderName == "Princess Yuna" and not playersInCombat then
        solariAmount = 4
    end

    boardCommonModule.gainResource(color, "solari", solariAmount)
    broadcastToAll(i18n("spaceBonus"):format(leaderName, solariAmount), color)
end

function applyBonusEmperor(_, color)
    local leaderName = helper.getLeaderName(color)
    helper.landTroopsFromOrbit(color, 2)
    broadcastToAll(i18n("emperorBonus"):format(leaderName), color)

end

function landTroopsFromOrbit(parameters)
    local playerColor = parameters[1]
    local count = parameters[2]
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    local garrison = garrisonParks[playerColor]
    parkModule.transfert(count, orbit, garrison)
end

function sendTroopsBackToOrbit(parameters)
    local playerColor = parameters[1]
    local troops = parameters[2]
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    parkModule.putObjects(troops, orbit)
end

function getTroopsFromOrbit(playerColor)
    local orbit = constants.players[playerColor].board.call("getOrbitPark")
    return parkModule.getObjects(orbit)
end
