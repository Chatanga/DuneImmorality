core = require("Core")

i18n = require("i18n")
require("locales")

constants = require("Constants")

helper = require("HelperModule")

combat_marker_offside_positions = {
    Red = core.getHardcodedPositionFromGUID('2d1d17', 1.21999431, 1.27230573, -12.0970058) + Vector(0, 0, 0),
    Blue = core.getHardcodedPositionFromGUID('f22e20', 1.194473, 1.57161641, -12.0935984) + Vector(1, 0, 0),
    Yellow = core.getHardcodedPositionFromGUID('c2dd31', 1.27534652, 0.6798021, -12.1175385) + Vector(2, 0, 0),
    Green = core.getHardcodedPositionFromGUID('a1a9a7', 1.23153877, 0.9726308, -12.1025581) + Vector(3, 0, 0)
}

-- TODO Make these positions relative to some anchor.
dreadnoughtRestingPositions =
{
    Yellow = {
        Vector(9.32, 1.57, -11.0),
        Vector(9.32, 1.57, -9.5)
    },
    Green = {
        Vector(9.32, 1.58, -7.0),
        Vector(9.32, 1.58, -8.5)
    },
    Blue = {
        Vector(0.35, 1.58, -11.0),
        Vector(0.35, 1.58, -9.5)
        },
    Red = {
        Vector(0.35, 1.58, -7.09),
        Vector(0.35, 1.58, -8.5)
    }
}

theme = {
    button_offset_y = 0, -- Set number. Value greater than or equal to 0. Defaults to 0.10.
    button_width = 800, -- Set number. Defaults to 450.
    button_height = 10, -- Set number. Defaults to 300.
    button_color = {0.25, 0.25, 0.25}, -- Set number {Red,Green,Blue}. Value bitween 0.00 to 1.00. Defaults to {1.00,1.00,1.00] ("White").
    text_color = {1.00, 1.00, 1.00}, -- Set number {Red,Green,Blue}. Value bitween 0.00 to 1.00. Defaults to {0.25,0.25,0.25] ("Black").
    text_size = 80 -- Set number. Defaults to 100.
}

positioning = {
    pos_intrigue_discard = constants.getLandingPositionFromGUID("976c3a"),
    conflict_discard = core.getHardcodedPositionFromGUID('cb0478', -1.15463293, 0.63, -9.798157) + constants.someHeight
}

things = {
    buttonPass = {
        Red = "0e9fa2",
        Blue = "643f32",
        Green = "9c69b9",
        Yellow = "65876d"
    },

    blue_spice = '9cc286',
    red_spice = '3074d4',
    green_spice = '22478f',
    yellow_spice = '78fb8a',

    marker_round = 'fb41e2',

    conflictZone = "6d632e",
    zone_vp_encours = "740624",
    trash = "ef8614",

    firstPlayerMarkerZone = {
        Yellow = "e9a44c",
        Green = "59523d",
        Blue = "1fc559",
        Red = "346e0d"
    }
}

spiceSpaces = {
    { zoneGUID = "69f925", name = "spiceGreatFlat", bonus = "3cdb2d" },
    { zoneGUID = "622708", name = "spiceHaggaBasin", bonus = "394db2" },
    { zoneGUID = "2c77c1", name = "spiceImperialBasin", bonus = "116807" }
}

state = {
    roundStarted = false
}

_ = core.registerLoadablePart(function(saved_data)
    self.interactable = false

    state.roundStarted = true
    activateButton()
end)

function onLocaleChange()
    self.clearButtons()
    activateButton()
end

function activateButton()
    self.createButton({
        click_function = "Makers",
        function_owner = self,
        color = button_color,
        font_color = text_color,
        rotation = {0, 0, 0},
        label = "MAKERS\nRECALL",
        position = {-7.1, 0.2, 8},
        scale = {2, 1, 2},
        width = 600,
        height = 310,
        font_size = 120
    })
end

function isRoundStarted() return state.roundStarted end

function Makers()
    if not identifyFirstPlayer() then
        broadcastToAll(i18n("noFirstPlayer"))
        return
    end

    state.roundStarted = true
    for index in pairs(buttonPass) do
        buttonPass[index].clearButtons()
    end
    self.clearButtons()

    marker_round.setPositionSmooth(constants.marker_positions.makers, false, false)

    for _, spiceSpace in ipairs(spiceSpaces) do
        if not containOneOrMoreAgents(spiceSpace.zoneGUID) then
            Wait.time(function()
                broadcastToAll(i18n(spiceSpace.name), {0.956, 0.392, 0.113})
                getObjectFromGUID(spiceSpace.bonus).call("incrementVal")
            end, 1)
        end
    end

    Wait.time(Recall, 2)
end

function containOneOrMoreAgents(zoneGUID)
    for _, item in ipairs(getObjectFromGUID(zoneGUID).getObjects()) do
        if item.getDescription() == "Agent" then
            return true
        end
    end
    return false
end

function Recall() startLuaCoroutine(self, "recallAndEndTurn") end

function getDreadnoughtRestingPosition(dreadnoughName)
    for color, _ in pairs(constants.players) do
        if dreadnoughName == color .. " dreadnought" then
            return dreadnoughtRestingPositions[color][1]
        elseif dreadnoughName == color .. " Dreadnought" then
            return dreadnoughtRestingPositions[color][2]
        end
    end
    return nil
end

function recallTroops()
    local conflictArea = getObjectFromGUID(conflictZone).getObjects()
    for _, item in ipairs(conflictArea) do
        local itemName = item.getName()
        if constants.players[itemName] then
            helper.sendTroopsBackToOrbit(itemName, {item})
        else
            local p = getDreadnoughtRestingPosition(itemName)
            if p then
                item.setPositionSmooth(p, false, true)
                item.setRotation({0, 0, 0})
            end
        end
        sleep(0.1)
    end
end

function recallMentat()
    local mentat = getObjectFromGUID("c2a908")
    mentat.setColorTint("White")
    mentat.setPositionSmooth(getObjectFromGUID("565d09").getPosition(), false, true)
    mentat.setRotationSmooth({0, 180, 0})
end

function recallAgents()
    for color, player in pairs(players) do
        local allAgents = {player.swordmaster}
        for _, agent in ipairs(player.agents) do
            allAgents[#allAgents] = agent
        end
        for i, agent in ipairs(allAgents) do
            if agent then
                agent.setPositionSmooth(constants.players[color].agent_positions[i], false, true)
                agent.setRotationSmooth({0, 180, 0})
                sleep(0.1)
            end
        end
    end
end

function recalCombatMarkers()
    for color, player in pairs(players) do
        player.marker_combat.setPositionSmooth(combat_marker_offside_positions[color], false, true)
        player.marker_combat.setRotationSmooth({0, 180, 0})
        sleep(0.1)
    end
end

function cleanPlayerCardZones()
    local cardZones = {
        Yellow = "ae1ef8",
        Green = "890115",
        Red = "cd9716",
        Blue = "f20a74"
    }
    for color, zoneGUID in pairs(cardZones) do
        for _, object in ipairs(getObjectFromGUID(zoneGUID)) do
            if object.type == 'Card' or object.type == 'Deck' then
                if object.hasTag('Intrigue') then
                    object.setPosition(pos_intrigue_discard)
                else
                    object.setPosition(constants.players[color].discardPosition)
                end
            end
        end
    end
end

function activateNewRoundTechEffecs()
    for color, player in pairs(constants.players) do
        local leaderName = helper.getLeaderName(color)

        if helper.hasTech(color, "Holtzman") then
            DrawOne(_, color)
            broadcastToAll(leaderName .. i18n("holtzmanEngine"), color)
        end

        if helper.hasTech(color, "shuttleFleet") then
            helper.gainResource(color, "solari", 2)
            broadcastToAll(leaderName .. i18n("shuttleFleet"), color)
        end

        for _, object in ipairs(player.techZone.getObjects()) do
            if object.getDescription() == "Tech" then
                object.setRotationSmooth({0, 180, 0}, false, false)
            end
            if object.getGMNotes() == "ok" and leaderName == "Norma Cenva" then
                DrawOne(_, color)
                broadcastToAll(leaderName .. i18n("holtzmanEffect"), color)
                break
            end
        end
    end
end

function recallAndEndTurn()
    marker_round.setPositionSmooth(constants.marker_positions.combat, false, false)

    recallTroops()
    recallMentat()
    recallAgents()
    recalCombatMarkers()

    -- Trash VP token left around after a conflict.
    for _, object in ipairs(zone_vp_encours.getObjects()) do
        if object then
            if object.getDescription() == "VP" then
                trash.putObject(object)
            end
        end
    end

    -- New conflict.
    helper.moveCardFromZone('07e239', conflict_discard, {0, 180, 0}, true, true)

    cleanPlayerCardZones()

    -- wait after collecting reveal zones into discards for letting time for
    -- cards to stack in the discard pile before drawing for holtzman effects
    sleep(1)

    broadcastToAll(i18n('nextRound'), "Purple")

    local blackMarketBoard = getObjectFromGUID("ab7ac5")
    if blackMarketBoard then
        blackMarketBoard.call("updateBlackMarket")
    end

    Global.call("resetRound")

    local activatePlayers = getObjectFromGUID("4a3e76").call("getPlayersBasedOnHotseat")
    local firstPlayerColor = findNextPlayer(activatePlayers)
    -- Not true: assert((#activatePlayers > 1) == (firstPlayerColor ~= nil))
    if firstPlayerColor then
        Global.call("updateTurnOrder")
        setFirstPlayer(firstPlayerColor)
    end

    marker_round.setPositionSmooth(constants.marker_positions.state.roundStarted, false, false)

    activateNewRoundTechEffecs()

    Wait.time(function() broadcastToAll(i18n("drawFive"), {0.5, 0.5, 0.5}) end, 2)
    Wait.time(function()
        marker_round.setPositionSmooth(constants.marker_positions.player_turns, false, false)
        broadcastToAll(i18n("playersTurn"), "Pink")
        activateButton()
        state.roundStarted = false
    end, 4)

    return 1
end

function identifyFirstPlayer()
    for color, _ in pairs(constants.players) do
        for _, object in ipairs(firstPlayerMarkerZone[color].getObjects()) do
            if object == constants.first_player_marker then
                return color
            end
        end
    end
    return nil
end

function findNextPlayer(activatePlayers)
    local nextPlayer = identifyFirstPlayer()
    local playerPresences = {}
    for _, color in ipairs(activatePlayers) do
        playerPresences[color] = true
    end
    repeat
        assert(nextPlayer)
        nextPlayer = constants.turnOrder[nextPlayer]
    until playerPresences[nextPlayer]
    return nextPlayer
end

function setFirstPlayer(firstPlayerColor)
    broadcastToAll(i18n('firstPlayer') .. helper.getLeaderName(firstPlayerColor), firstPlayerColor)
    if getObjectFromGUID("4a3e76").getVar("hotseat_mode") then
        Player.getPlayers()[1].changeColor(firstPlayerColor)
    else
        Turns.turn_color = firstPlayerColor
        Turns.enable = true
    end

    -- TODO Why it wasn't here in the first place?
    constants.first_player_marker.setPositionSmooth(constants.first_player_positions[firstPlayerColor], false, false)
end
