constants = require("Constants")

function getAveragePosition(guids)
    local p = Vector(0, 0, 0)
    local count = 0
    for _, guid in ipairs(guids) do
        local object = getObjectFromGUID(guid)
        p = p + object.getPosition()
        count = count + 1
    end
    return p * (1 / count)
end

Stillsuits_zone = "556f43"
HardyWarriors_zone = "a2fd8e"
Secrets_zone = "1f7c08"
SelectiveBreeding_zone = "7dc6e5"
Foldspace_zone = "9a9eb5"
Heighliner_zone = "8b0515"
Wealth_zone = "b2c461"
Conspire_zone = "cd9386"

snoopers = {
    { guid = "a58ce8", position = getAveragePosition({Conspire_zone, Wealth_zone})},
    { guid = "857f74", position = getAveragePosition({Heighliner_zone, Foldspace_zone})},
    { guid = "bed196", position = getAveragePosition({SelectiveBreeding_zone, Secrets_zone})},
    { guid = "b10897", position = getAveragePosition({HardyWarriors_zone, Stillsuits_zone})}
}

leaderPos = constants.leaderPos

i18n = require("i18n")
require("locales")

function onload(saved_data)
    if saved_data ~= '["claimed"]' then
        claimLabel()
    end

end

function updateSave()
    local data_to_save = {claimed}
    saved_data = JSON.encode(data_to_save)
    self.script_state = saved_data
end

function claimLabel()
    self.createButton({
       click_function = "claimLeader",
       function_owner = self,
       label          = i18n("claimLeaderButton"),
       position       = {0.3,0.2,0.4},
       rotation       = {0, 0, 0},
       scale          = {0.75, 1, 0.75},
       width          = 600,
       height         = 150,
       tooltip        = "",
       font_color     = {1, 1, 1},
       font_size      = 85,
       color          = "Black"
       })
  end

  function claimLeaderCall(params)
      claimLeader(getObjectFromGUID(params.GO) , params.color)
  end

  function claimLeader(GO, color)
      if getObjectFromGUID("4a3e76").getVar("banPhase") == 1 then
          leaderSelectedGUIDAndPlayerColorToPass = {
              leaderSelectedGUID = GO.guid,
              playerColor = color
          }
          getObjectFromGUID("4a3e76").call("updateLeaderBan",leaderSelectedGUIDAndPlayerColorToPass)
      elseif getObjectFromGUID("4a3e76").getVar("hiddenPicks") == 1 then
          if color == "Red" or color == "Blue" or color == "Green" or color == "Yellow" then
              local playerColors = {"Red","Blue","Yellow", "Green","Grey","White"}
              for i,playerColor in ipairs(playerColors) do
                  if color == playerColor then
                      table.remove(playerColors , i)
                  end
              end
              GO.setInvisibleTo(playerColors)
              GO.setPositionSmooth(leaderPos[color])
              GO.setRotationSmooth({0,180,0})
              GO.clearButtons()
              Wait.time(function() GO.lock() end, 2)
              leaderSelectedGUIDAndPlayerColorToPass = {
                  leaderSelectedGUID = GO.guid,
                  playerColor = color
              }
              getObjectFromGUID("4a3e76").call("updateLeaderChoices",leaderSelectedGUIDAndPlayerColorToPass)
          end
      else
        if color == "Red" or color == "Blue" or color == "Green" or color == "Yellow" then
            if not self.getLock() then
              GO.setPositionSmooth(leaderPos[color])
              GO.setRotationSmooth({0,180,0})
              GO.clearButtons()
              Wait.time(function() GO.lock() end, 2)
          end
          claimed = "claimed"
          updateSave()
          broadcastToAll(i18n("willBe"):format(i18n(color:lower())
,GO.getName()), color)
            for _, snooper in ipairs(snoopers) do
                local object = getObjectFromGUID(snooper.guid)
                object.setPositionSmooth(snooper.position, false, false)
                object.setRotationSmooth(Vector(0, 90, 0))
            end
        else
          broadcastToColor(i18n("cantClaimLeader"), color, color)
        end
        GO.setInvisibleTo({})
    end
  end
