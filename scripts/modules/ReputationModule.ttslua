local reputationModule = {}

core = require("Core")

i18n = require("i18n")
require("locales")

constants = require("Constants")

helper = require("HelperModule")

reputationTokenInitialPositions = {
    emperor = {
        Red = core.getHardcodedPositionFromGUID('acfcef', -9.718932, 0.752500057, 1.85001934),
        Blue = core.getHardcodedPositionFromGUID('426a23', -10.1873131, 0.7525, 1.85005856),
        Green = core.getHardcodedPositionFromGUID('d7c9ba', -9.273371, 0.754999936, 1.85001135),
        Yellow = core.getHardcodedPositionFromGUID('489871', -8.834659, 0.755000055, 1.85005462)
    },
    spacingGuild = {
        Red = core.getHardcodedPositionFromGUID('be464e', -9.737917, 0.752500057, -3.64000726),
        Blue = core.getHardcodedPositionFromGUID('4069d8', -10.1552429, 0.7525, -3.64000773),
        Green = core.getHardcodedPositionFromGUID('89da7d', -9.288127, 0.754999936, -3.64001036),
        Yellow = core.getHardcodedPositionFromGUID('9d0075', -8.846331, 0.755000055, -3.63998413)
    },
    beneGesserit = {
        Red = core.getHardcodedPositionFromGUID('713eae', -9.766583, 0.752500057, -9.100027),
        Blue = core.getHardcodedPositionFromGUID('2a88a6', -10.2121153, 0.7525, -9.100084),
        Green = core.getHardcodedPositionFromGUID('2dc980', -9.319731, 0.754999936, -9.100017),
        Yellow = core.getHardcodedPositionFromGUID('a3729e', -8.888711, 0.755000055, -9.100081)
    },
    fremen = {
        Red = core.getHardcodedPositionFromGUID('088f51', -9.762483, 0.752500057, -14.5700312),
        Blue = core.getHardcodedPositionFromGUID('0e6e41', -10.2238894, 0.7525, -14.5700541),
        Green = core.getHardcodedPositionFromGUID('d390dc', -9.328378, 0.754999936, -14.570013),
        Yellow = core.getHardcodedPositionFromGUID('77d7c8', -8.88775, 0.755000055, -14.5700016)
    }
}

reputationTokens = {
    emperor = {
        Red = 'acfcef',
        Blue = '426a23',
        Green = 'd7c9ba',
        Yellow = '489871'
    },
    spacingGuild = {
        Red = 'be464e',
        Blue = '4069d8',
        Green = '89da7d',
        Yellow = '9d0075'
    },
    beneGesserit = {
        Red = '713eae',
        Blue = '2a88a6',
        Green = '2dc980',
        Yellow = 'a3729e'
    },
    fremen = {
        Red = '088f51',
        Blue = '0e6e41',
        Green = 'd390dc',
        Yellow = '77d7c8'
    }
}

friendshipBags = {
    emperor = "6a4186",
    spacingGuild = "400d45",
    beneGesserit = "e763f6",
    fremen = "8bcfe7"
}

allianceTokenInitialPositions = {
    emperor = core.getHardcodedPositionFromGUID('13e990', -9.511963, 0.780000031, 5.860889),
    spacingGuild = core.getHardcodedPositionFromGUID('ad1aae', -9.507135, 0.780000031, 0.249081045),
    beneGesserit = core.getHardcodedPositionFromGUID('33452e', -9.551374, 0.780000031, -5.21345472),
    fremen = core.getHardcodedPositionFromGUID('4c2bcc', -9.543688, 0.780000031, -10.6707687)
}

allianceTokens = {
    emperor = '13e990',
    spacingGuild = 'ad1aae',
    beneGesserit = '33452e',
    fremen = '4c2bcc'
}

allianceZones = {
    emperor = '2c3c38',
    spacingGuild = '8d2035',
    beneGesserit = '53e26c',
    fremen = 'ae150a'
}

reputationLevels = {}

_ = core.registerLoadablePart(function(_)
    reputationModule.reputationLevels = reputationModule.initReputationLevels()

    -- TODO Repair
    --[[
    for _, thing in pairs(factionThings) do
        thing.bag_friendship.interactable = false
    end
    ]]--
end)

function reputationModule.initReputationLevels()
    local reputationLevels = {}
    for faction, initialPositions in pairs(reputationTokenInitialPositions) do
        local factionLevels = {}
        for color, position in pairs(initialPositions) do
            local startingCell = position
            local allianceToken = allianceTokenInitialPositions[faction]
            local step = (allianceToken.z - startingCell.z) / 5 -- The token is centered on the 5th level (but you only need to reach the 4th to get it).
            local zero = startingCell.z - step / 2
            factionLevels[color] = {
                step = step,
                none = zero + step * 0,
                friendship = zero + step * 2,
                alliance = zero + step * 4,
                max = zero + step * 6,
            }
        end
        reputationLevels[faction] = factionLevels
    end
    return reputationLevels
end

function reputationModule.hasFriendship(color, faction)
    local reputationLevels = reputationModule.reputationLevels[faction][color]
    if reputationTokens[faction][color].getPosition().z > reputationLevels.friendship then
        return true
    end
end

function reputationModule.hasReachedAllianceLevel(color, faction)
    local reputationLevels = reputationModule.reputationLevels[faction][color]
    local z = reputationTokens[faction][color].getPosition().z
    return z - reputationLevels.step < reputationLevels.alliance and z > reputationLevels.alliance
end

function reputationModule.getReputationLevels(faction, color)
    return reputationModule.reputationLevels[faction][color]
end

-- TODO Rework the rank / level!
function reputationModule.getReputationRank(faction, color)
    local reputationLevels = reputationModule.getReputationLevels(faction, color)
    local pos = reputationTokens[faction][color].getPosition()
    return math.floor((pos.z - reputationLevels.none) / reputationLevels.step)
end

function reputationModule.increaseReputation(color, faction)
    local reputationLevels = reputationModule.getReputationLevels(faction, color)
    local pos = reputationTokens[faction][color].getPosition()
    local leaderName = helper.getLeaderName(color)
    if pos.z < reputationLevels.max then
        local wasUnderFrienship = pos.z < reputationLevels.friendship
        reputationTokens[faction][color].setPositionSmooth({
            pos.x, pos.y, pos.z + reputationLevels.step
        }, false, false)
        local isAboveFrienship = pos.z > reputationLevels.friendship
        if wasUnderFrienship and isAboveFrienship then
            reputationModule.gainFriendship(faction, color)
        end
        reputationModule.checkAllianceOwneship(faction, color)
        broadcastToAll(i18n("reputUp"):format(leaderName, i18n(faction)), color)
    else
        broadcastToColor(i18n("reputMax"), color, "Pink")
    end
end

function reputationModule.decreaseReputation(color, faction)
    local reputationLevels = reputationModule.getReputationLevels(faction, color)
    local pos = reputationTokens[faction][color].getPosition()
    local leaderName = helper.getLeaderName(color)
    if pos.z > reputationLevels.none then
        local wasAboveFrienship = pos.z > reputationLevels.friendship
        reputationTokens[faction][color].setPositionSmooth({
            pos.x, pos.y, pos.z - reputationLevels.step
        }, false, false)
        local isUnderFrienship = pos.z > reputationLevels.friendship
        if wasAboveFrienship and isUnderFrienship then
            helper.loseFriendship(faction, color)
        end
        reputationModule.challengeAlliance(faction, color)
        broadcastToAll(i18n("reputDown"):format(leaderName, i18n(faction)), color)
    else
        broadcastToColor(i18n("reputMin"), color, "Orange")
    end
end

function reputationModule.gainFriendship(faction, color)
    helper.grantScoreTokenFromBag(color, friendshipBags[faction])
end

function reputationModule.loseFriendship(faction, color)
    for _, scoreToken in ipairs(helper.getScoreTokens(color)) do
        if scoreToken.getName() == faction .. " Friendship" then
            scoreToken.destruct()
        end
    end
end

function reputationModule.checkAllianceOwneship(faction, color)
    local leaderName = helper.getLeaderName(color)

    local posz_liste = {}

    for playerColor, pion in pairs(reputationTokens[faction]) do
        if core.stillExist(pion) and playerColor ~= color then
            posz_liste[playerColor] = pion.getPosition().z
        end
    end

    local playerVictoryTokens =  helper.getScoreTokens(color)
    local hasAlliance = false
    for _, victoryToken in ipairs(playerVictoryTokens) do
        if victoryToken == allianceTokens[faction] then
            hasAlliance = true
        end
    end

    Wait.time(function()
        local posz = reputationTokens[faction][color].getPosition().z
        local posz_requis = reputationModule.getReputationLevels(faction, color).alliance

        if hasAlliance then
            local biggestDelta = 0;
            local playerTakingAlliance = ""
            local tiedForVP = false

            for otherColor, posz_compared in pairs(posz_liste) do

                if posz < (posz_compared - 0.5) then
                    local delta = posz_compared - posz

                    if (delta - biggestDelta) < 0.5 and (delta - biggestDelta) > -0.5 then
                        tiedForVP = true
                    end

                    if delta > biggestDelta then
                        biggestDelta = delta
                        playerTakingAlliance = otherColor
                    end
                end

            end

            if tiedForVP or biggestDelta > 0 or posz < posz_requis then
                broadcastToAll(i18n("loseAlliance"):format(leaderName, i18n(faction)), color)
            end

            if tiedForVP then
                broadcastToAll(i18n("tiedAlliance"):format(i18n(faction)), "Pink")

            elseif biggestDelta > 0 then
                local leaderTakingAllianceName = helper.getLeaderName(playerTakingAlliance)
                helper.grantScoreToken(playerTakingAlliance, allianceTokens[faction])
                broadcastToAll(i18n("recoverAlliance"):format(leaderTakingAllianceName, i18n(faction)), playerTakingAlliance)
            elseif posz < posz_requis then
                allianceTokens[faction].setPositionSmooth(allianceTokenInitialPositions[faction], false, false)
            end

        end

        if not hasAlliance and posz > posz_requis then
            local isReputStrongest = true
            for _, posz_compared in pairs(posz_liste) do
                if posz < (posz_compared + 0.5) then
                    isReputStrongest = false
                end
            end

            if isReputStrongest then
                helper.grantScoreToken(color, allianceTokens[faction])
                broadcastToAll(i18n("recoverAlliance"):format(leaderName, i18n(faction)), color)
            end
        end

    end, 1)
end

function reputationModule.FremenUp(color)
    reputationModule.increaseReputation(color, "fremen")
    if reputationModule.getReputationRank("fremen", color) == 4 then
        reputationModule.reputationModule.applyFremenBonus(color)
    end
end

function reputationModule.FremenDown(color)
    reputationModule.decreaseReputation(color, "fremen")
end

function reputationModule.BeneUp(color)
    reputationModule.increaseReputation(color, "beneGesserit")
    if reputationModule.getReputationRank("beneGesserit", color) == 4 then
        reputationModule.reputationModule.applyBeneGesseritBonus(color)
    end
end

function reputationModule.BeneDown(color)
    reputationModule.decreaseReputation(color, "beneGesserit")
end

function reputationModule.GuildUp(color)
    reputationModule.increaseReputation(color, "spacingGuild")
    if reputationModule.getReputationRank("spacingGuild", color) == 4 then
        reputationModule.reputationModule.applySpacingGuildBonus(color)
    end
end

function reputationModule.GuildDown(color)
    reputationModule.decreaseReputation(color, "spacingGuild")
end

function reputationModule.EmperorUp(color)
    reputationModule.increaseReputation(color, "emperor")
    if reputationModule.getReputationRank("emperor", color) == 4 then
        reputationModule.reputationModule.applyEmperorBonus(color)
    end
end

function reputationModule.EmperorDown(color)
    reputationModule.decreaseReputation(color, "emperor")
end

function reputationModule.applyFremenBonus(_, color)
    boardCommonModule.gainResource(color, "water", 1)
    local leaderName = helper.getLeaderName(color)
    broadcastToAll(i18n("fremenBonus"):format(leaderName), color)
end

function reputationModule.applyBeneGesseritBonus(_, color)
    Wait.time(function() boardCommonModule.drawIntrigue(color) end, 0.75)
    local leaderName = helper.getLeaderName(color)
    broadcastToAll(i18n("beneBonus"):format(leaderName), color)
end

function reputationModule.applySpacingGuildBonus(_, color)
    local solariAmount = 3

    local leaderName = helper.getLeaderName(color)
    local isFightTime = Global.call("isFightTime")
    if leaderName == "Princess Yuna" and not isFightTime then
        solariAmount = 4
    end

    boardCommonModule.gainResource(color, "solari", solariAmount)
    broadcastToAll(i18n("spaceBonus"):format(leaderName, solariAmount), color)
end

function reputationModule.applyEmperorBonus(_, color)
    local leaderName = helper.getLeaderName(color)
    helper.landTroopsFromOrbit(color, 2)
    broadcastToAll(i18n("emperorBonus"):format(leaderName), color)
end

return reputationModule
