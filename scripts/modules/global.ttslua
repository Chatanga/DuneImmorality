i18n = require("i18n")
require("locales")

local constants = require("Constants")

local locale = "en"

local orderedPlayers = {"Blue", "Red", "Green", "Yellow"}

local myState = nil

_ = require("Core").registerLoadablePart(function(savedData)

    -- TODO Repair
    if true then
        return
    end

    if savedData ~= '' then
        myState = JSON.decode(savedData)
        locale = myState.locale
    else
        myState = {
            locale = locale,
            fight = false,
            reveal = {
                Red = false,
                Blue = false,
                Green = false,
                Yellow = false
            },
        }
    end

    -- TODO Why not in Setup?
    initHiddenPick()

    -- Réinitialise les triggers des plateaux de joueurs.
    onPlayerTurn(nil, nil)
end)

function onSave()
    return JSON.encode(myState)
end

-- Update the turn order to only include active players which haven't revealed yet.
function updateTurnOrder()
    local newTableOrder = {}

    for _, color in ipairs(orderedPlayers) do
        if not myState.reveal[color] then
            newTableOrder[#newTableOrder] = color
        end
    end

    Turns.order = newTableOrder
end

function passTurn(color)
    if reveal["Blue"] and reveal["Red"] and reveal["Green"] and reveal["Yellow"] then
        letsFight()
        buttonPassAnchors[color].clearButtons()
    else
        if not getObjectFromGUID("4a3e76").getVar("hotseat_mode") then
            updateTurnOrder()
        end
        buttonPassAnchors[color].clearButtons()

        local nextColor = color
        repeat
            nextColor = constants.turnOrder[nextColor]
        until reveal[nextColor] == 0 or nextColor == color
        Turns.turn_color = nextColor

        if not getObjectFromGUID("4a3e76").getVar("hotseat_mode") then
            Turns.enable = true
        end

    end
end

function letsFight()
    Turns.enable = false
    marker_round.setPositionSmooth(constants.marker_positions.combat, false, false)
    broadcastToAll(i18n("fightWarning"), {0.5, 0.5, 0.5})
    myState.fight = true

    local secondaryBoard = getObjectFromGUID("662ced")
    secondaryBoard.call("onFightStart")
end

function isFightTime()
    return myState.fight
end

-- Reset the reveal myState of all active players (non active players are seen as having already revealed).
function resetRound()
    for _, color in ipairs(orderedPlayers) do
        reveal[color] = true
    end

    local players = nil

    if getObjectFromGUID("4a3e76").getVar("hotseat_mode")  then
        players = orderedPlayers
    else
        players = getSeatedPlayers()
    end

    for _, color in ipairs(players) do
        reveal[color] = false
    end

    myState.fight = false
end
