battlegroundModule = {}

constants = require("Constants")

helper = require("HelperModule")

parkModule = require("ParkModule")

local structure = {
    zone_conflict_encours = "43f00f", -- ???small zone top rigth of conflict card
    zone_vp_encours = "740624", -- ..for conflict vp placement
    marker_round = "fb41e2", -- round marker
    zone_conseil = "e51f6e", -- scripting zone high consil
    zone_combat = "6d632e", -- doesnt include garnisons
    zone_vp_combat = "740624", -- (...).getPosition()
    combat_marker_origin = "1d4424"
}

local positioning = {
    -- Up to 4 slots to put VP tokens for the current conflict.
    pos_vp_encours = {},
    -- The 20 spaces where to put power marker.
    marker_combat_pos = {}
}

function initPositioning()

    for i = 0, 3 do
        local origin = structure.zone_vp_combat.getPosition()
        table.insert(positioning.pos_vp_encours, origin + Vector(0, 0.5 + i / 2, -0.5 + i % 2))
    end

    for i = 0, 19 do
        local origin = structure.combat_marker_origin.getPosition()
        positioning.marker_combat_pos[#positioning.marker_combat_pos + 1] = {
            x = origin.x - 0.47 + (i % 10) * 0.90,
            y = 3,
            z = origin.z - 0.85 - math.floor(i / 10) * 1.03
        }
    end
end

local controlable_spaces = {
    imperialBasin = {
        zone = getObjectFromGUID("3fe117"),
        position = helperModule.getLandingPositionFromGUID("3fe117")
    },
    arrakeen = {
        zone = getObjectFromGUID("f1f53d"),
        position = helperModule.getLandingPositionFromGUID("f1f53d"),
    },
    carthag = {
        zone = getObjectFromGUID("9fc2e1"),
        position = helperModule.getLandingPositionFromGUID("9fc2e1"),
    }
}

function disableObjects()
    local intrigueDiscardBackCard = getObjectFromGUID("90f762")
    intrigueDiscardBackCard.interactable = false

    for color, player in pairs(constants.players) do
        buttonPassAnchors[color].interactable = false
        player.board.interactable = false
    end
    for _, player in pairs(constants.alivePlayers) do
        player.council_token.interactable = false
    end
end

function updateForceCount(color)
    local force = 0

    for _, object in ipairs(structure.zone_combat.getObjects()) do
        if isTroop(color, object) then
            force = force + 2
        elseif isDreadnought(color, object) then
            local leaderName = helper.getLeaderName(color)
            if leaderName == "Prince Rhombur" then
                force = force + 4
            else
                force = force + 3
            end
        end
    end

    if helper.hasTech(color, "Restricted Ordnance") and helper.hasACouncilSeat(color) then
        force = force + 4
    end

    local marker_combat_pos_ini = {
        Red = {2.35, 1.58, -8.15},
        Blue = {1.28, 1.58, -8.15},
        Green = {3.48, 1.58, -8.15},
        Yellow = {4.55, 1.58, -8.15}
    }

    local forceToken = constants.players[color].marker_combat
    if force == 0 then
        forceToken[color].setPositionSmooth(marker_combat_pos_ini, false, false)
    elseif force < 21 then
        forceToken[color].setPositionSmooth(positioning.marker_combat_pos[force], false, false)
        forceToken[color].setRotationSmooth({0, 180, 0})
    else
        forceToken[color].setPositionSmooth(positioning.marker_combat_pos[force - 20], false, false)
        forceToken[color].setRotationSmooth({0, 180, 180})
    end
end

function addTroopInDefense(controlableSpace)
    local controllingPlayer = getObjectFromGUID("2da390").getControllingPlayer(controlableSpace)
    if controllingPlayer then
        local troops = helper.getTroopsFromOrbit(controllingPlayer)
        for _, troop in ipairs(troops) do
            troop.locked = false
            troop.setPositionSmooth(helperModule.getLandingPositionFromGUID('6d632e'), false, false)
            troop.setRotation(Vector(0, 0, 0))
            local leaderName = helper.getLeaderName(joueur)
            broadcastToAll(i18n("defenseTroop"):format(leaderName), joueur)
            break
        end
    end
end

function isUnit(color, object)
    return isTroop(color, object) or isDreadnought(color, object)
end

function isTroop(color, object)
    return object.getName() == color
end

function isDreadnought(color, object)
    return object.getName() == color .. " Dreadnought" or object.getName() == color .. " dreadnought"
end

function onObjectEnterScriptingZone(zone, enter_object)

    -- TODO Repair
    if true then
        return
    end

    if zone.guid == hidingLeaderScriptingZone.guid and hidingState ~= 0 then
        enter_object.setInvisibleTo(hidingStateTable[hidingState])
    end

    if zone.guid == positioning.zone_combat.guid then
        for color, _ in pairs(constants.players) do
            if isUnit(color, enter_object) then
                updateForceCount(color)
            end
        end
    end

    if zone.guid == positioning.zone_conflict_encours.guid then

        --[[
        local harkonnenBaronInstructionCardGUID = '2b2575'
        if enter_object.guid == harkonnenBaronInstructionCardGUID then
            enter_object.setPosition({4.80, 2, -2.73})
            helper.getDeckOrCard('07e239').takeObject({
                position = {-1.16, 2, -5.74},
                rotation = {0, 180, 0},
                smooth = false
            })
        end
        ]]--

        local round_start = getObjectFromGUID("120026").call("isRoundStarted")
        if round_start == 1 then
            prepareBattleground(enter_object)
        end
    end

    local controlableSpace = getCorrespondingControlableSpace(enter_object)
    if controlableSpace then
        updateFlag(controlableSpace)
    end

    if enter_object.getName() == 'Mentat' then
        for _, player in pairs(constants.alivePlayers) do
            if zone == player.zone_player then
                enter_object.setColorTint(player.swordmaster.getColorTint())
                break
            end
        end
    end

end

function prepareBattleground(conflictCard)
    local conflictName = conflictCard.getName()
    local j = 0
    local vpBattleTokenBag = getObjectFromGUID('d9a457')
    for _, vpBattleToken in pairs(vpBattleTokenBag.getObjects()) do
        -- we use name instead of getName() here because objects are still in a bag and cannot use methods on them
        if vpBattleToken.name == conflictName then
            j = j + 1
            vpBattleTokenBag.takeObject({
                position = positioning.pos_vp_encours[j],
                rotation = {0, 180, 0},
                smooth = true,
                guid = vpBattleToken.guid
            })
        end
    end
    local controlableSpace = getCorrespondingControlableSpace(enter_object)
    if controlableSpace then
        addTroopInDefense(controlableSpace)
    end
end

function updateFlag(zone, controlableSpace)
    for color, player in pairs(constants.alivePlayers) do
        local scorePark = player.board.call("getScorePark")
        if zone == scorePark.zone then
            local objects = controlableSpace.zone.getObjects()
            for _, object in ipairs(objects) do
                if string.find(object.getName(), " Flag") then
                    object.destruct()
                end
            end
            local p = controlableSpace.position
            playerThings[color].flag_bag.takeObject({
                -- Position is adjusted so as to insert the token below any dreadnought.
                position = Vector(p.x, 0.78, p.z),
                rotation = {0, 180, 0},
                smooth = false
            })
        end
    end
end

function getCorrespondingControlableSpace(vpToken)
    local name = vpToken.getName()
    if name == "Secure Imperial Basin" or name == "Battle for Imperial Basin" then
        return controlable_spaces.imperialBasin
    elseif name == "Siege of Arrakeen" or name == "Battle for Arrakeen" then
        return controlable_spaces.arrakeen
    elseif name == "Siege of Carthag" or name == "Battle for Carthag" then
        return controlable_spaces.carthag
    else
        return nil
    end
end

function getControlableSpaceByGUID(GUID)
    if GUID == "2d469b" or GUID == "ff1ce6" then
        return controlable_spaces.imperialBasin
    elseif GUID == "29a66c" or GUID == "e25f79" then
        return controlable_spaces.arrakeen
    elseif GUID == "f131f2" or GUID == "e123ce" then
        return controlable_spaces.carthag
    else
        return nil
    end
end

return battlegroundModule
