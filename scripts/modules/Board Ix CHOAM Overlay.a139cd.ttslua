core = require("Core")

i18n = require("i18n")
require("locales")

constants = require("Constants")

helper = require("HelperModule")

boardCommonModule = require("BoardCommonModule")

initialCargoPositions = {
    Yellow = core.getHardcodedPositionFromGUID('8fa76f', 8.999581, 0.769945145, 2.850366),
    Green = core.getHardcodedPositionFromGUID('34281d', 8.449573, 0.770712, 2.85037041),
    Blue = core.getHardcodedPositionFromGUID('68e424', 7.34954929, 0.7722466, 2.8544035),
    Red = core.getHardcodedPositionFromGUID('e9096d', 7.89962053, 0.7714795, 2.853223)
}

-- Beware that this variable is processed on loading to resolve its GUIDs.
ixStructure = {
    spaces = {
        Swordmaster = '6932df',
        InterstellarShipping = '3e7409',
        Smuggling = '6cc2f8'
    }
}

_ = core.registerLoadablePart(function(saved_data)
    ixStructure = core.resolveGUIDs(false, structure)

    self.interactable = false
    self.locked = true
    activateButtons()
end)

function onLocaleChange()
    self.clearButtons()
    activateButtons()
end

function activateButtons()
    boardCommonModule.createActivationButton("CommercialMoney", "get", {2.5, 0.1, 0.15})
    boardCommonModule.createActivationButton("CommercialSpice", "get", {2.855, 0.1, 0.15})
    boardCommonModule.createActivationButton("CommercialTroop", "get", {2.68, 0.1, -0.27})
    boardCommonModule.createActivationButton("HighCouncil", "pay & get", {-2, 0.1, -0.1})
    boardCommonModule.createActivationButton("Mentat", "pay & get", {-2, 0.1, 0.72})
    boardCommonModule.createActivationButton("Swordmaster", "pay & get", {1.08, 0.1, 0.72})

    boardCommonModule.createActivationButton("SmugglingUp", "get + ↑", {1.08, 0.1, 0.72})
    boardCommonModule.createActivationButton("SmugglingDown", "get + ↓↓", {1.08, 0.1, 0.91})
    boardCommonModule.createActivationButton("ShippingUpUp", "↑ + ↑", {1.28, 0.1, -0.48})
    boardCommonModule.createActivationButton("ShippingUpDown", "↑ + ↓↓", {1.28, 0.1, -0.29})
    boardCommonModule.createActivationButton("ShippingDownUp", "↓↓ + ↑", {1.28, 0.1, -0.1})
    boardCommonModule.createActivationButton("CommercialUp", "↑", {2.51, 0.1, 0.63})
    boardCommonModule.createActivationButton("CommercialDown", "↓↓", {2.75, 0.1, 0.63})
end

function Swordmaster(_, color)
    boardCommonModule.forwardCall("Swordmaster", color, ixStructure.spaces.Swordmaster)
end

function Mentat(_, color)
    boardCommonModule.forwardCall("Mentat", color)
end

function HighCouncil(_, color)
    boardCommonModule.forwardCall("HighCouncil", color)
end

function gainSolariFromSmuggling(color)
    local leaderName = helper.getLeaderName(color)
    local solariAmount = 1
    if leaderName == "Princess Yuna" then
        solariAmount = 2
    end
    boardCommonModule.gainResource(color, "Solari", solariAmount)
    return i18n.translateCountable(solariAmount, "solari", "solaris")
end

function getCargoStep(color)
    local p = constants.players[color].cargo.getPosition()
    return math.floor((p.z - initialCargoPositions[color].z) / 1.1 + 0.5)
end

function setCargoPositionSmooth(color, step)
    local p = initialCargoPositions[color]:copy()
    p:setAt('z', p.z + 1.1 * step)
    constants.players[color].cargo.setPositionSmooth(p, false, true)
end

function cargoUp(color)
    local cargoMoved = false

    local step = getCargoStep(color)
    if step >= 3 then
        broadcastToColor(i18n("nope"), color, "Purple")
    else
        setCargoPositionSmooth(color, step + 1)
        cargoMoved = true
    end

    return cargoMoved
end

function cargoReset(color)
    local cargoMoved = false

    local step = getCargoStep(color)
    if step == 0 then
        broadcastToColor(i18n("nope"), color, "Purple")
    else
        setCargoPositionSmooth(color, 0)
        cargoMoved = true

        if step >= 3 then
            local planetIx = getObjectFromGUID('d75455')
            planetIx.call("callRegisterTechDiscount", {
                color = color,
                source = "cargo",
                amount = 2
            })
        end
    end

    return cargoMoved
end

function SmugglingUp(_, color)
    if helper.startPlayerAction(color, ixStructure.spaces.Smuggling) then
        if cargoUp(color) then
            local leaderName = helper.getLeaderName(color)
            local solariString = gainSolariFromSmuggling(color)
            broadcastToAll(i18n("smugglingUp"):format(leaderName, solariString), color)
        end
    end
end

function SmugglingDown(_, color)
    if helper.startPlayerAction(color, ixStructure.spaces.Smuggling) then
        if cargoReset(color) then
            local leaderName = helper.getLeaderName(color)
            local solariString = gainSolariFromSmuggling(color)
            broadcastToAll(i18n("smugglingDown"):format(leaderName, solariString), color)
        end
    end
end

function CommercialUp(_, color)
    if helper.startPlayerAction(color, nil) then
        if cargoUp(color) then
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(leaderName .. i18n("commercialUp"), color)
        end
    end
end

function CommercialDown(_, color)
    if helper.startPlayerAction(color, nil) then
        if cargoReset(color) then
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(leaderName .. i18n("commercialDown"), color)
        end
    end
end

function ShippingUpUp(_, color)
    if helper.startPlayerAction(color, ixStructure.spaces.InterstellarShipping) then
        local reputationLevels = boardCommonModule.getReputationLevels("spacingGuild", color)
        local step = getCargoStep(color)
        if pion_reput.spacingGuild[color].getPosition().z < reputationLevels.friendship then
            broadcastToColor(i18n("notReputation"), color, "Red")
        elseif step >= 2 then
            broadcastToColor(i18n("nope"), color, "Purple")
        else
            cargoUp(color)
            Wait.time(function()
                cargoUp(color)
            end, 0.5)
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(leaderName .. i18n("commercialUpUp"), color)
        end
    end
end

function ShippingUpDown(_, color)
    if helper.startPlayerAction(color, ixStructure.spaces.InterstellarShipping) then
        local reputationLevels = boardCommonModule.getReputationLevels("spacingGuild", color)
        if pion_reput.spacingGuild[color].getPosition().z < reputationLevels.friendship then
            broadcastToColor(i18n("notReputation"), color, "Red")
        elseif cargoUp(color) then
            Wait.time(function()
                cargoReset(color)
            end, 0.5)
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(leaderName .. i18n("commercialUpDown"), color)
        end
    end
end

function ShippingDownUp(_, color)
    if helper.startPlayerAction(color, ixStructure.spaces.InterstellarShipping) then
        local reputationLevels = boardCommonModule.getReputationLevels("spacingGuild", color)
        if pion_reput.spacingGuild[color].getPosition().z < reputationLevels.friendship then
            broadcastToColor(i18n("notReputation"), color, "Red")
        elseif cargoReset(color) then
            Wait.time(function()
                cargoUp(color)
            end, 0.5)
            local leaderName = helper.getLeaderName(color)
            broadcastToAll(leaderName .. i18n("commercialDownUp"), color)
        end
    end
end

function CommercialMoney(_, color)
    if helper.startPlayerAction(color, nil) then
        local solariAmount = 5

        local leaderName = helper.getLeaderName(color)
        local isFightTime = Global.call("isFightTime")
        if leaderName == "Princess Yuna" and not isFightTime then
            solariAmount = 6
        end

        boardCommonModule.gainResource(color, "solari", solariAmount)
        broadcastToAll(i18n("shippingSolari"):format(leaderName, solariAmount), color)

        for otherColor, _ in pairs(constants.alivePlayers) do
            if otherColor ~= color then
                boardCommonModule.gainResource(otherColor, "solari", 1)
            end
        end
        broadcastToAll(i18n("dividends"), white)
    end
end

function CommercialSpice(_, color)
    if helper.startPlayerAction(color, nil) then
        self.clearButtons()
        Wait.time(activateButtons, 1)

        local leaderName = helper.getLeaderName(color)
        boardCommonModule.gainResource(color, "spice", 2)
        broadcastToAll(i18n("shippingSpice"):format(leaderName), color)
    end
end

function CommercialTroop(_, color)
    if helper.startPlayerAction(color, nil) then
        self.clearButtons()
        Wait.time(activateButtons, 1)

        local leaderName = helper.getLeaderName(color)
        local troopCount = 2
        if helper.hasTech(color, "Troop Transports") then
            troopCount = 3
            broadcastToAll(i18n("troopTransport"):format(leaderName), color)
        else
            broadcastToAll(i18n("shippingTroops"):format(leaderName), color)
        end
        helper.landTroopsFromOrbit(color, troopCount)
    end
end
