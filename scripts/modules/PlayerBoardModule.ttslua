playerBoardModule = {}

constants = require("Constants")

helperModule = require("HelperModule")

parkModule = require("ParkModule")

playerBoardModule.playerColor = nil

playerBoardModule.orbitZone = nil

playerBoardModule.orbitPark = nil

playerBoardModule.score = 0

playerBoardModule.global_score_positions = {}

playerBoardModule.scoreboardZone = nil

playerBoardModule.scorePark = nil

playerBoardModule.alive = true

function playerBoardModule.init(playerColor, centerPosition, savedData)
    playerBoardModule.playerColor = playerColor

    if savedData ~= '' then
        local state = JSON.decode(savedData)
        if state.version == 1 then
            playerBoardModule.orbitZone = getObjectFromGUID(state.orbitZoneGUID)
            playerBoardModule.scoreboardZone = getObjectFromGUID(state.scoreboardZoneGUID)
            playerBoardModule.alive = state.alive
        else
            log('[playerBoardModule.init] Unsupported save version: ' .. tostring(state.version))
        end
    end

    if not playerBoardModule.alive then
        return
    end

    playerBoardModule.orbitPark = playerBoardModule.createOrbitPark(centerPosition)
    playerBoardModule.initPlayerScore()

    playerBoardModule.saveState()
end

function playerBoardModule.saveState()
    local state = {
        version = 1,
        orbitZoneGUID = playerBoardModule.orbitZone.getGUID(),
        scoreboardZoneGUID = playerBoardModule.scoreboardZone.getGUID(),
        alive = playerBoardModule.alive
    }
    self.script_state = JSON.encode(state)
end

function playerBoardModule.createOrbitPark(centerPosition)
    local allSlots = {}
    local slots = {}
    for i = 1, 4 do
        for j = 1, 4 do
            local x = (i - 2.5) * 0.5
            local z = (j - 2.5) * 0.5
            local slot = Vector(x, 0.29, z):rotateOver('y', -45) + centerPosition
            allSlots[#allSlots + 1] = slot
            if i < 3 or j < 3 then
                slots[#slots + 1] = slot
            end
        end
    end

    if not playerBoardModule.orbitZone then
        playerBoardModule.orbitZone = parkModule.findBoundingZone(45, Vector(0.35, 0.35, 0.35), allSlots)
    end

    for i, troop in ipairs(constants.players[playerBoardModule.playerColor].troops) do
        troop.locked = true
        troop.setPosition(slots[i])
        troop.setRotation(Vector(0, 45, 0))
    end

    return parkModule.createPark(
        "orbit." .. playerBoardModule.playerColor,
        slots,
        Vector(0, -45, 0),
        playerBoardModule.orbitZone,
        playerBoardModule.playerColor,
        playerBoardModule.playerColor,
        true)
end

function playerBoardModule.initPlayerScore()
    playerBoardModule.generateGlobalScoreboardPositions()
    playerBoardModule.scorePark = playerBoardModule.createPlayerScoreboardPark()
    playerBoardModule.updatePlayerScore()
end

function playerBoardModule.generateGlobalScoreboardPositions()
    local origin = constants.players[playerBoardModule.playerColor].score_marker.getPosition()

    -- Avoid collision between markers by giving a different height to each.
    local h = 1
    for color, _ in pairs(constants.players) do
        if color == playerBoardModule.playerColor then
            break
        else
            h = h + 0.5
        end
    end

    playerBoardModule.global_score_positions = {}
    for i = 1, 14 do
        playerBoardModule.global_score_positions[i] = {
            origin.x,
            2.7 + h,
            origin.z + (i - 2) * 1.165
        }
    end
end

function playerBoardModule.createPlayerScoreboardPark()
    local origin = constants.players[playerBoardModule.playerColor].vp_4_players_token_initial_position

    local direction = 1
    if playerBoardModule.playerColor == "Red" or  playerBoardModule.playerColor == "Blue" then
        direction = -1
    end

    local slots = {}
    for i = 0, 17 do
        slots[i + 1] = Vector(
            origin.x + i * 1.092 * direction,
            origin.y,
            origin.z)
    end

    if not playerBoardModule.scoreboardZone then
        playerBoardModule.scoreboardZone = parkModule.findBoundingZone(0, Vector(0.6, 0.2, 0.6), slots)
    end

    return parkModule.createPark(
        "scoreboard." .. playerBoardModule.playerColor,
        slots,
        Vector(0, 180, 0),
        playerBoardModule.scoreboardZone,
        nil,
        "VP",
        false)
end

function playerBoardModule.updatePlayerScore()
    local zoneObjects = playerBoardModule.scoreboardZone.getObjects()
    local newScore = 0
    for _, object in ipairs(zoneObjects) do
        if object.getDescription() == "VP" then
            newScore = newScore + 1
        end
    end

    local vpIndex = math.min(14, newScore + 1)
    local score_marker = constants.players[playerBoardModule.playerColor].score_marker
    score_marker.setPositionSmooth(playerBoardModule.global_score_positions[vpIndex])
    score_marker.setRotationSmooth({0, 0, 0}, false, false)

    if newScore ~= playerBoardModule.score then
        playerBoardModule.score = newScore
        local setup = getObjectFromGUID("4a3e76")
        setup.call("updateScores")
    end
end

function playerBoardModule.onObjectEnterScriptingZone(zone, enter_object)
    if playerBoardModule.alive then
        if zone.guid == playerBoardModule.scoreboardZone.guid then
            local description = enter_object.getDescription()
            if description == "VP" then
                playerBoardModule.updatePlayerScore()
            end
        end
    end
end

function playerBoardModule.onObjectLeaveScriptingZone(zone, enter_object)
    if playerBoardModule.alive then
        if zone.guid == playerBoardModule.scoreboardZone.guid then
            local description = enter_object.getDescription()
            if description == "VP" then
                playerBoardModule.updatePlayerScore()
            end
        end
    end
end

function playerBoardModule.shutdown()
    playerBoardModule.alive = false
    playerBoardModule.saveState()

    local player = constants.players[playerBoardModule.playerColor]

    local toBeRemoved = {
        player.swordmaster,
        player.council_token,
        -- player.vp_4_players_token,
        player.score_marker,
        player.tleilaxuTokens,
        player.researchTokens,
        player.cargo,
        player.flag_bag,
        player.marker_combat
    }
    playerBoardModule.addAll(toBeRemoved, player.dreadnoughts)
    playerBoardModule.addAll(toBeRemoved, player.agents)
    playerBoardModule.addAll(toBeRemoved, player.troops)

    for _, object in ipairs(toBeRemoved) do
        if toBeRemoved then
            object.interactable = true
            object.destruct()
        end
    end
end

function playerBoardModule.addAll(objects, otherObjects)
    assert(objects)
    assert(otherObjects)
    for _, object in ipairs(otherObjects) do
        objects[#objects + 1] = object
    end
end

return playerBoardModule
