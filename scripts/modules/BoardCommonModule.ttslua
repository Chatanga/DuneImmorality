local boardCommonModule = {}

core = require("Core")

i18n = require("i18n")
require("locales")

constants = require("Constants")

helper = require("HelperModule")

reputation = require("ReputationModule")

-- Beware that this variable is processed on loading to resolve its GUIDs.
structure = {
    spaces = {
        HighCouncil = '8a6315',
        Mentat = '30cff9'
    },
    mentatZone = '565d09',
    foldspaceDeckZone = "6b62e0",
    intrigueDeckZone = "a377d8",
}

_ = core.registerLoadablePart(function(_)
    structure = core.resolveGUIDs(false, structure)
end)

function boardCommonModule.createActivationButton(spaceName, label, position)
    boardCommonModule.createPayButton(spaceName, label, position)
end

function boardCommonModule.createPayButton(spaceName, label, position)

    local hardCodedWiths = {
        ["get"] = 400,
        ["pay"] = 400,
        ["pay & get"] = 900,
        ["Collect"] = 700,
        ["pay & Collect"] = 1200,
        ["get + ↑"] = 700,
        ["get + ↓↓"] = 700,
        ["↑ + ↑"] = 500,
        ["↑ + ↓↓"] = 500,
        ["↓↓ + ↑"] = 500,
        ["↑"] = 250,
        ["↓↓"] = 250,
        ["+"] = 350,
        ["-"] = 350,
    }

    local width = hardCodedWiths[label]
    assert(width, "unknow label: " .. tostring(label))

    self.createButton({
        click_function = spaceName,
        function_owner = self,
        label = label,
        position = position,
        scale = {0.1, 0.1, 0.1},
        width = width,
        height = 350,
        font_size = 200,
        color = {0.25, 0.25, 0.25, 1},
        font_color = {0.7843, 0.7843, 0.7843, 1}
    })
end

function boardCommonModule.createUpDownButton(factionPrefix, label, position)
    local parameters = {
        function_owner = self,
        scale = {0.15, 0.100000001490116, 0.100000001490116},
        width = 300,
        height = 450,
        font_size = 350,
        color = {0.25, 0.25, 0.25, 1},
        font_color = {0.7843, 0.7843, 0.7843, 1},
        tooltip = i18n("toolTipDecreaseRep")
    }

    parameters.click_function = factionPrefix .. "Down"
    parameters.label = "↓"
    parameters.tooltip = i18n("toolTipDecreaseRep")
    parameters.position = helper.toVector(position) + Vector(0, 0, 0.05)
    self.createButton(parameters)

    parameters.click_function = factionPrefix .. "Up"
    parameters.label = "↑"
    parameters.tooltip = i18n("toolTipIncreaseRep")
    parameters.position = helper.toVector(position) - Vector(0, 0, 0.05)
    self.createButton(parameters)
end

function boardCommonModule.checkAgentAndPlayer(color, zone)
    if color ~= "Red" and color ~= "Blue" and color ~= "Green" and color ~= "Yellow" then
        broadcastToColor(i18n("noTouch"), color, "Pink")
        return false
    end

    local authorized = false
    for _, object in ipairs(zone.getObjects()) do
        local name = object.getName()
        authorized =
            name == "" .. color .. " Agent" or
            name == "" .. color .. " Swordmaster" or
            name == "Mentat" -- TODO Check the Mentat ownership.
        if authorized then
            break
        end
    end

    if not authorized then
        broadcastToColor(i18n("noAgent"), color, "Purple")
    end
end

function boardCommonModule.checkReputation(color, faction)
    if (reputation.hasFriendship(color, faction)) then
        return true
    else
        broadcastToColor(i18n("notReputation"), color, "Red")
        return false
    end
end

function boardCommonModule.drawCardsFromPlace(color, spaceName, drawCount)
    local leaderName = helper.getLeaderName(color)
    local counter = i18n.translateCountable(drawCount, "card", "cards")
    local message = i18n(spaceName .. "DrawMultiple"):format(leaderName, counter)
    return helper.drawCards(color, drawCount, message)
end

function boardCommonModule.forwardCall(spaceName, color)
    self.clearButtons()
    Wait.time(activateButtons, 1)
    boardCommonModule[spaceName](color)
end

--[[
    Space activations for the swordmaster, the mentat and the high council are
    put here to share the code between the Ix CHOAM overlay and the normal CHOAM
    overlay.
]]--

function boardCommonModule.Swordmaster(color, zone)
    if boardCommonModule.checkAgentAndPlayer(color, zone) then
        local leaderName = helper.getLeaderName(color)
        local solariPrice = 8
        if leaderName == "Duke Leto" then
            solariPrice = 7
        end
        if boardCommonModule.payResource(color, "solari", solariPrice) then
            local swordmasterSlotPosition = constants.players[color].agent_positions[3]
            constants.players[color].swordmaster.setPositionSmooth(swordmasterSlotPosition, false, false)
            if leaderName == "Count Ilban" then
                local drawCount = 1
                if boardCommonModule.drawCardsFromPlace(color, "arrakeen", drawCount) then
                    broadcastToAll(i18n("swordMaster"):format(leaderName, solariPrice) .. i18n("et") .. i18n("drawOneCard"), color)
                else
                    broadcastToAll(i18n("swordMaster"):format(leaderName, solariPrice) .. ".", color)
                end
            else
                broadcastToAll(i18n("swordMaster"):format(leaderName, solariPrice) .. ".", color)
            end
        end
    end
end

function boardCommonModule.Mentat(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.Mentat) then
        local leaderName = helper.getLeaderName(color)
        local solariPrice = 2
        if leaderName == "Duke Leto" then
            solariPrice = 1
        end
        if boardCommonModule.payResource(color, "solari", solariPrice) then
            local aboutTheMentat = " "
            local mentat = boardCommonModule.getMentat()
            if mentat then
                aboutTheMentat = i18n("mentatToken")
                local mentatSlotPosition = constants.players[color].agent_positions[4]
                mentat.setPositionSmooth(mentatSlotPosition, false, false)
            end

            local drawCount = 1
            if leaderName == "Count Ilban" then
                drawCount = 2
            end

            if boardCommonModule.drawCardsFromPlace(color, "mentat", drawCount) then
                local counter = i18n.translateCountable(drawCount, "card", "cards")
                broadcastToAll(i18n("mentatPayment"):format(leaderName, solariPrice, aboutTheMentat) .. i18n("et") .. i18n("drawCards"):format(drawCount, counter), color)
            else
                broadcastToAll(i18n("mentatPayment"):format(leaderName, solariPrice, aboutTheMentat) .. ".", color)
            end
        end
    end
end

function boardCommonModule.getMentat()
    for _, object in ipairs(structure.mentatZone.getObjects()) do
        if object.getName() == "Mentat" then
            return object
        end
    end
    return nil
end

function boardCommonModule.HighCouncil(color)
    if boardCommonModule.checkAgentAndPlayer(color, structure.spaces.HighCouncil) then
        local leaderName = helper.getLeaderName(color)
        local solariPrice = 5
        if leaderName == "Duke Leto" then
            solariPrice = 4
        end
        if boardCommonModule.payResource(color, "solari", solariPrice) then
            boardCommonModule.gainCouncilSiege(color)

            if leaderName == "Count Ilban" then
                local drawCount = 1
                if boardCommonModule.drawCardsFromPlace(color, "mentat", drawCount) then
                    local counter = i18n.translateCountable(drawCount, "card", "cards")
                    broadcastToAll(i18n("highCouncil"):format(leaderName, solariPrice) .. i18n("et") .. i18n("drawCards"):format(drawCount, counter), color)
                else
                    broadcastToAll(i18n("highCouncil"):format(leaderName, solariPrice) .. ".", color)
                end
            else
                broadcastToAll(i18n("highCouncil"):format(leaderName, solariPrice) .. ".", color)
            end
        end
    end
end

-- Place the council token and get back a 2 persuasion token near the player board.
function boardCommonModule.gainCouncilSiege(color)
    local player = constants.players[color]

    local destination = player.council_zone
    local ix_CHOAM_overlay = getObjectFromGUID("a139cd")
    if not ix_CHOAM_overlay then
        destination = constants.players[color].vanilla_council_zone
    end

    player.council_token.setPositionSmooth(destination, false, false)
    player.council_token.interactable = false

    local councilInfluenceBonusBag = getObjectFromGUID("074f6d")
    councilInfluenceBonusBag.takeObject({
        position = player.council_bonus_zone,
        rotation = Vector(0, 180, 0),
        callback_function = function (object)
            object.locked = true
            object.setScale(Vector(0.4, 1, 0.4))
            object.setPosition(object.getPosition() + Vector(0, -0.2, 0))
        end
    })
end

return boardCommonModule
